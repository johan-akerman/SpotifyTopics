{"ast":null,"code":"/* global module */\n'use strict';\n/**\n * Class representing the API\n */\n\nvar SpotifyWebApi = function () {\n  var _baseUri = 'https://api.spotify.com/v1';\n  var _accessToken = null;\n  var _promiseImplementation = null;\n\n  var WrapPromiseWithAbort = function (promise, onAbort) {\n    promise.abort = onAbort;\n    return promise;\n  };\n\n  var _promiseProvider = function (promiseFunction, onAbort) {\n    var returnedPromise;\n\n    if (_promiseImplementation !== null) {\n      var deferred = _promiseImplementation.defer();\n\n      promiseFunction(function (resolvedResult) {\n        deferred.resolve(resolvedResult);\n      }, function (rejectedResult) {\n        deferred.reject(rejectedResult);\n      });\n      returnedPromise = deferred.promise;\n    } else {\n      if (window.Promise) {\n        returnedPromise = new window.Promise(promiseFunction);\n      }\n    }\n\n    if (returnedPromise) {\n      return new WrapPromiseWithAbort(returnedPromise, onAbort);\n    } else {\n      return null;\n    }\n  };\n\n  var _extend = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var target = args[0];\n    var objects = args.slice(1);\n    target = target || {};\n    objects.forEach(function (object) {\n      for (var j in object) {\n        if (object.hasOwnProperty(j)) {\n          target[j] = object[j];\n        }\n      }\n    });\n    return target;\n  };\n\n  var _buildUrl = function (url, parameters) {\n    var qs = '';\n\n    for (var key in parameters) {\n      if (parameters.hasOwnProperty(key)) {\n        var value = parameters[key];\n        qs += encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';\n      }\n    }\n\n    if (qs.length > 0) {\n      // chop off last '&'\n      qs = qs.substring(0, qs.length - 1);\n      url = url + '?' + qs;\n    }\n\n    return url;\n  };\n\n  var _performRequest = function (requestData, callback) {\n    var req = new XMLHttpRequest();\n\n    var promiseFunction = function (resolve, reject) {\n      function success(data) {\n        if (resolve) {\n          resolve(data);\n        }\n\n        if (callback) {\n          callback(null, data);\n        }\n      }\n\n      function failure() {\n        if (reject) {\n          reject(req);\n        }\n\n        if (callback) {\n          callback(req, null);\n        }\n      }\n\n      var type = requestData.type || 'GET';\n      req.open(type, _buildUrl(requestData.url, requestData.params));\n\n      if (_accessToken) {\n        req.setRequestHeader('Authorization', 'Bearer ' + _accessToken);\n      }\n\n      req.onreadystatechange = function () {\n        if (req.readyState === 4) {\n          var data = null;\n\n          try {\n            data = req.responseText ? JSON.parse(req.responseText) : '';\n          } catch (e) {\n            console.error(e);\n          }\n\n          if (req.status >= 200 && req.status < 300) {\n            success(data);\n          } else {\n            failure();\n          }\n        }\n      };\n\n      if (type === 'GET') {\n        req.send(null);\n      } else {\n        req.send(requestData.postData ? JSON.stringify(requestData.postData) : null);\n      }\n    };\n\n    if (callback) {\n      promiseFunction();\n      return null;\n    } else {\n      return _promiseProvider(promiseFunction, function () {\n        req.abort();\n      });\n    }\n  };\n\n  var _checkParamsAndPerformRequest = function (requestData, options, callback, optionsAlwaysExtendParams) {\n    var opt = {};\n    var cb = null;\n\n    if (typeof options === 'object') {\n      opt = options;\n      cb = callback;\n    } else if (typeof options === 'function') {\n      cb = options;\n    } // options extend postData, if any. Otherwise they extend parameters sent in the url\n\n\n    var type = requestData.type || 'GET';\n\n    if (type !== 'GET' && requestData.postData && !optionsAlwaysExtendParams) {\n      requestData.postData = _extend(requestData.postData, opt);\n    } else {\n      requestData.params = _extend(requestData.params, opt);\n    }\n\n    return _performRequest(requestData, cb);\n  };\n  /**\n   * Creates an instance of the wrapper\n   * @constructor\n   */\n\n\n  var Constr = function () {};\n\n  Constr.prototype = {\n    constructor: SpotifyWebApi\n  };\n  /**\n   * Fetches a resource through a generic GET request.\n   *\n   * @param {string} url The URL to be fetched\n   * @param {function(Object,Object)} callback An optional callback\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n  Constr.prototype.getGeneric = function (url, callback) {\n    var requestData = {\n      url: url\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\n   * Fetches information about the current user.\n   * See [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getMe = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches current user's saved tracks.\n   * See [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getMySavedTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Adds a list of tracks to the current user's saved tracks.\n   * See [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.addToMySavedTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'PUT',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Remove a list of tracks from the current user's saved tracks.\n   * See [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.removeFromMySavedTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'DELETE',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Checks if the current user's saved tracks contains a certain list of tracks.\n   * See [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.containsMySavedTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks/contains',\n      params: {\n        ids: trackIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Get a list of the albums saved in the current Spotify user's \"Your Music\" library.\n   * See [Get Current User's Saved Albums](https://developer.spotify.com/web-api/get-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getMySavedAlbums = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Save one or more albums to the current user's \"Your Music\" library.\n   * See [Save Albums for Current User](https://developer.spotify.com/web-api/save-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.addToMySavedAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'PUT',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Remove one or more albums from the current user's \"Your Music\" library.\n   * See [Remove Albums for Current User](https://developer.spotify.com/web-api/remove-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.removeFromMySavedAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'DELETE',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Check if one or more albums is already saved in the current Spotify user's \"Your Music\" library.\n   * See [Check User's Saved Albums](https://developer.spotify.com/web-api/check-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.containsMySavedAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums/contains',\n      params: {\n        ids: albumIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Get the current user’s top artists based on calculated affinity.\n   * See [Get a User’s Top Artists](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getMyTopArtists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Get the current user’s top tracks based on calculated affinity.\n   * See [Get a User’s Top Tracks](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getMyTopTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Get tracks from the current user’s recently played tracks.\n   * See [Get Current User’s Recently Played Tracks](https://developer.spotify.com/web-api/web-api-personalization-endpoints/get-recently-played/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getMyRecentlyPlayedTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/recently-played'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Adds the current user as a follower of one or more other Spotify users.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.followUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\n   * Adds the current user as a follower of one or more artists.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.followArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\n   * Add the current user as a follower of one playlist.\n   * See [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} ownerId The id of the playlist owner. If you know the Spotify URI of\n   * the playlist, it is easy to find the owner's user id\n   * (e.g. spotify:user:<here_is_the_owner_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed. For instance,\n   * whether you want the playlist to be followed privately ({public: false})\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.followPlaylist = function (ownerId, playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(ownerId) + '/playlists/' + playlistId + '/followers',\n      type: 'PUT',\n      postData: {}\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Removes the current user as a follower of one or more other Spotify users.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.unfollowUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\n   * Removes the current user as a follower of one or more artists.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.unfollowArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\n   * Remove the current user as a follower of one playlist.\n   * See [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} ownerId The id of the playlist owner. If you know the Spotify URI of\n   * the playlist, it is easy to find the owner's user id\n   * (e.g. spotify:user:<here_is_the_owner_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.unfollowPlaylist = function (ownerId, playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(ownerId) + '/playlists/' + playlistId + '/followers',\n      type: 'DELETE'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\n   * Checks to see if the current user is following one or more other Spotify users.\n   * See [Check if Current User Follows Users or Artists](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the users sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.isFollowingUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\n   * Checks to see if the current user is following one or more artists.\n   * See [Check if Current User Follows](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the artists sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.isFollowingArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\n   * Check to see if one or more Spotify users are following a specified playlist.\n   * See [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} ownerId The id of the playlist owner. If you know the Spotify URI of\n   * the playlist, it is easy to find the owner's user id\n   * (e.g. spotify:user:<here_is_the_owner_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the users are following the playlist sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.areFollowingPlaylist = function (ownerId, playlistId, userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(ownerId) + '/playlists/' + playlistId + '/followers/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\n   * Get the current user's followed artists.\n   * See [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} [options] Options, being after and limit.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an object with a paged object containing\n   * artists.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * artists objects. Not returned if a callback is given.\n   */\n\n\n  Constr.prototype.getFollowedArtists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following',\n      type: 'GET',\n      params: {\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches information about a specific user.\n   * See [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getUser = function (userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId)\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches a list of the current user's playlists.\n   * See [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getUserPlaylists = function (userId, options, callback) {\n    var requestData;\n\n    if (typeof userId === 'string') {\n      requestData = {\n        url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists'\n      };\n    } else {\n      requestData = {\n        url: _baseUri + '/me/playlists'\n      };\n      callback = options;\n      options = userId;\n    }\n\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches a specific playlist.\n   * See [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getPlaylist = function (userId, playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches the tracks from a specific playlist.\n   * See [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getPlaylistTracks = function (userId, playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Creates a playlist and stores it in the current user's library.\n   * See [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. You may want to user the \"getMe\" function to\n   * find out the id of the current logged in user\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.createPlaylist = function (userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists',\n      type: 'POST',\n      postData: options\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Change a playlist's name and public/private state\n   * See [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. You may want to user the \"getMe\" function to\n   * find out the id of the current logged in user\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} data A JSON object with the data to update. E.g. {name: 'A new name', public: true}\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.changePlaylistDetails = function (userId, playlistId, data, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId,\n      type: 'PUT',\n      postData: data\n    };\n    return _checkParamsAndPerformRequest(requestData, data, callback);\n  };\n  /**\n   * Add tracks to a playlist.\n   * See [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.addTracksToPlaylist = function (userId, playlistId, uris, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks',\n      type: 'POST',\n      postData: {\n        uris: uris\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback, true);\n  };\n  /**\n   * Replace the tracks of a playlist\n   * See [Replace a Playlist's Tracks](https://developer.spotify.com/web-api/replace-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.replaceTracksInPlaylist = function (userId, playlistId, uris, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: {\n        uris: uris\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\n   * Reorder tracks in a playlist\n   * See [Reorder a Playlist’s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {number} rangeStart The position of the first track to be reordered.\n   * @param {number} insertBefore The position where the tracks should be inserted. To reorder the tracks to\n   * the end of the playlist, simply set insert_before to the position after the last track.\n   * @param {Object} options An object with optional parameters (range_length, snapshot_id)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.reorderTracksInPlaylist = function (userId, playlistId, rangeStart, insertBefore, options, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: {\n        range_start: rangeStart,\n        insert_before: insertBefore\n      }\n    };\n    /* eslint-enable camelcase */\n\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Remove tracks from a playlist\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.removeTracksFromPlaylist = function (userId, playlistId, uris, callback) {\n    var dataToBeSent = uris.map(function (uri) {\n      if (typeof uri === 'string') {\n        return {\n          uri: uri\n        };\n      } else {\n        return uri;\n      }\n    });\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        tracks: dataToBeSent\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\n   * Remove tracks from a playlist, specifying a snapshot id.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.removeTracksFromPlaylistWithSnapshotId = function (userId, playlistId, uris, snapshotId, callback) {\n    var dataToBeSent = uris.map(function (uri) {\n      if (typeof uri === 'string') {\n        return {\n          uri: uri\n        };\n      } else {\n        return uri;\n      }\n    });\n    /* eslint-disable camelcase */\n\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        tracks: dataToBeSent,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\n   * Remove tracks from a playlist, specifying the positions of the tracks to be removed.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<number>} positions array of integers containing the positions of the tracks to remove\n   * from the playlist.\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.removeTracksFromPlaylistInPositions = function (userId, playlistId, positions, snapshotId, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        positions: positions,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\n   * Fetches an album from the Spotify catalog.\n   * See [Get an Album](https://developer.spotify.com/web-api/get-album/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getAlbum = function (albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches the tracks of an album from the Spotify catalog.\n   * See [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getAlbumTracks = function (albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches multiple albums from the Spotify catalog.\n   * See [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/',\n      params: {\n        ids: albumIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches a track from the Spotify catalog.\n   * See [Get a Track](https://developer.spotify.com/web-api/get-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getTrack = function (trackId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/tracks/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches multiple tracks from the Spotify catalog.\n   * See [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/tracks/',\n      params: {\n        ids: trackIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches an artist from the Spotify catalog.\n   * See [Get an Artist](https://developer.spotify.com/web-api/get-artist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getArtist = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches multiple artists from the Spotify catalog.\n   * See [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getArtists = function (artistIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/',\n      params: {\n        ids: artistIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches the albums of an artist from the Spotify catalog.\n   * See [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getArtistAlbums = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches a list of top tracks of an artist from the Spotify catalog, for a specific country.\n   * See [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {string} countryId The id of the country (e.g. ES for Spain or US for United States)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getArtistTopTracks = function (artistId, countryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/top-tracks',\n      params: {\n        country: countryId\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches a list of artists related with a given one from the Spotify catalog.\n   * See [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getArtistRelatedArtists = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/related-artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches a list of Spotify featured playlists (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getFeaturedPlaylists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/featured-playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches a list of new album releases featured in Spotify (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getNewReleases = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/new-releases'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a List of Categories](https://developer.spotify.com/web-api/get-list-categories/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getCategories = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Get a single category used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a Category](https://developer.spotify.com/web-api/get-category/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getCategory = function (categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Get a list of Spotify playlists tagged with a particular category.\n   * See [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getCategoryPlaylists = function (categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId + '/playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Get Spotify catalog information about artists, albums, tracks or playlists that match a keyword string.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Array<string>} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', and 'track'.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.search = function (query, types, options, callback) {\n    var requestData = {\n      url: _baseUri + '/search/',\n      params: {\n        q: query,\n        type: types.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Fetches albums from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.searchAlbums = function (query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  };\n  /**\n   * Fetches artists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.searchArtists = function (query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  };\n  /**\n   * Fetches tracks from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.searchTracks = function (query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  };\n  /**\n   * Fetches playlists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.searchPlaylists = function (query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  };\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * See [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getAudioFeaturesForTrack = function (trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-features/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\n   * Get audio features for multiple tracks based on their Spotify IDs.\n   * See [Get Audio Features for Several Tracks](https://developer.spotify.com/web-api/get-several-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getAudioFeaturesForTracks = function (trackIds, callback) {\n    var requestData = {\n      url: _baseUri + '/audio-features',\n      params: {\n        ids: trackIds\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * See [Get Audio Analysis for a Track](https://developer.spotify.com/web-api/get-audio-analysis/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getAudioAnalysisForTrack = function (trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-analysis/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * See [Get Recommendations Based on Seeds](https://developer.spotify.com/web-api/get-recommendations/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getRecommendations = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * See [Available Genre Seeds](https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getAvailableGenreSeeds = function (callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations/available-genre-seeds'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\n   * Get information about a user’s available devices.\n   * See [Get a User’s Available Devices](https://developer.spotify.com/web-api/get-a-users-available-devices/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getMyDevices = function (callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/devices'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\n   * Get information about the user’s current playback state, including track, track progress, and active device.\n   * See [Get Information About The User’s Current Playback](https://developer.spotify.com/web-api/get-information-about-the-users-current-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getMyCurrentPlaybackState = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Get the object currently being played on the user’s Spotify account.\n   * See [Get the User’s Currently Playing Track](https://developer.spotify.com/web-api/get-the-users-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.getMyCurrentPlayingTrack = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/currently-playing'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Transfer playback to a new device and determine if it should start playing.\n   * See [Transfer a User’s Playback](https://developer.spotify.com/web-api/transfer-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} deviceIds A JSON array containing the ID of the device on which playback should be started/transferred.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.transferMyPlayback = function (deviceIds, options, callback) {\n    var postData = options || {};\n    postData.device_ids = deviceIds;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player',\n      postData: postData\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Start a new context or resume current playback on the user’s active device.\n   * See [Start/Resume a User’s Playback](https://developer.spotify.com/web-api/start-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.play = function (options, callback) {\n    var params = 'device_id' in options ? {\n      device_id: options.device_id\n    } : null;\n    var postData = {};\n    ['context_uri', 'uris', 'offset'].forEach(function (field) {\n      if (field in options) {\n        postData[field] = options[field];\n      }\n    });\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/play',\n      params: params,\n      postData: postData\n    }; // need to clear options so it doesn't add all of them to the query params\n\n    var newOptions = typeof options === 'function' ? options : {};\n    return _checkParamsAndPerformRequest(requestData, newOptions, callback);\n  };\n  /**\n   * Pause playback on the user’s account.\n   * See [Pause a User’s Playback](https://developer.spotify.com/web-api/pause-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.pause = function (options, callback) {\n    var params = 'device_id' in options ? {\n      device_id: options.device_id\n    } : null;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/pause',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Skips to next track in the user’s queue.\n   * See [Skip User’s Playback To Next Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.skipToNext = function (options, callback) {\n    var params = 'device_id' in options ? {\n      device_id: options.device_id\n    } : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/next',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Skips to previous track in the user’s queue.\n   * Note that this will ALWAYS skip to the previous track, regardless of the current track’s progress.\n   * Returning to the start of the current track should be performed using `.seek()`\n   * See [Skip User’s Playback To Previous Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.skipToPrevious = function (options, callback) {\n    var params = 'device_id' in options ? {\n      device_id: options.device_id\n    } : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/previous',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Seeks to the given position in the user’s currently playing track.\n   * See [Seek To Position In Currently Playing Track](https://developer.spotify.com/web-api/seek-to-position-in-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} position_ms The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.seek = function (position_ms, options, callback) {\n    var params = {\n      position_ms: position_ms\n    };\n\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/seek',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Set the repeat mode for the user’s playback. Options are repeat-track, repeat-context, and off.\n   * See [Set Repeat Mode On User’s Playback](https://developer.spotify.com/web-api/set-repeat-mode-on-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {String} state A string set to 'track', 'context' or 'off'.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.setRepeat = function (state, options, callback) {\n    var params = {\n      state: state\n    };\n\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/repeat',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Set the volume for the user’s current playback device.\n   * See [Set Volume For User’s Playback](https://developer.spotify.com/web-api/set-volume-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} volume_percent The volume to set. Must be a value from 0 to 100 inclusive.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.setVolume = function (volume_percent, options, callback) {\n    var params = {\n      volume_percent: volume_percent\n    };\n\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/volume',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Toggle shuffle on or off for user’s playback.\n   * See [Toggle Shuffle For User’s Playback](https://developer.spotify.com/web-api/toggle-shuffle-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {bool} state Whether or not to shuffle user's playback.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n\n\n  Constr.prototype.setShuffle = function (state, options, callback) {\n    var params = {\n      state: state\n    };\n\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/shuffle',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\n   * Gets the access token in use.\n   *\n   * @return {string} accessToken The access token\n   */\n\n\n  Constr.prototype.getAccessToken = function () {\n    return _accessToken;\n  };\n  /**\n   * Sets the access token to be used.\n   * See [the Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/) on\n   * the Spotify Developer site for more information about obtaining an access token.\n   *\n   * @param {string} accessToken The access token\n   * @return {void}\n   */\n\n\n  Constr.prototype.setAccessToken = function (accessToken) {\n    _accessToken = accessToken;\n  };\n  /**\n   * Sets an implementation of Promises/A+ to be used. E.g. Q, when.\n   * See [Conformant Implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md)\n   * for a list of some available options\n   *\n   * @param {Object} PromiseImplementation A Promises/A+ valid implementation\n   * @throws {Error} If the implementation being set doesn't conform with Promises/A+\n   * @return {void}\n   */\n\n\n  Constr.prototype.setPromiseImplementation = function (PromiseImplementation) {\n    var valid = false;\n\n    try {\n      var p = new PromiseImplementation(function (resolve) {\n        resolve();\n      });\n\n      if (typeof p.then === 'function' && typeof p.catch === 'function') {\n        valid = true;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    if (valid) {\n      _promiseImplementation = PromiseImplementation;\n    } else {\n      throw new Error('Unsupported implementation of Promises/A+');\n    }\n  };\n\n  return Constr;\n}();\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n  module.exports = SpotifyWebApi;\n}","map":{"version":3,"sources":["/Users/Akerman/Desktop/projects/spotify/client/node_modules/spotify-web-api-js/src/spotify-web-api.js"],"names":["SpotifyWebApi","_baseUri","_accessToken","_promiseImplementation","WrapPromiseWithAbort","promise","onAbort","abort","_promiseProvider","promiseFunction","returnedPromise","deferred","defer","resolvedResult","resolve","rejectedResult","reject","window","Promise","_extend","args","Array","prototype","slice","call","arguments","target","objects","forEach","object","j","hasOwnProperty","_buildUrl","url","parameters","qs","key","value","encodeURIComponent","length","substring","_performRequest","requestData","callback","req","XMLHttpRequest","success","data","failure","type","open","params","setRequestHeader","onreadystatechange","readyState","responseText","JSON","parse","e","console","error","status","send","postData","stringify","_checkParamsAndPerformRequest","options","optionsAlwaysExtendParams","opt","cb","Constr","constructor","getGeneric","getMe","getMySavedTracks","addToMySavedTracks","trackIds","removeFromMySavedTracks","containsMySavedTracks","ids","join","getMySavedAlbums","addToMySavedAlbums","albumIds","removeFromMySavedAlbums","containsMySavedAlbums","getMyTopArtists","getMyTopTracks","getMyRecentlyPlayedTracks","followUsers","userIds","followArtists","artistIds","followPlaylist","ownerId","playlistId","unfollowUsers","unfollowArtists","unfollowPlaylist","isFollowingUsers","isFollowingArtists","areFollowingPlaylist","getFollowedArtists","getUser","userId","getUserPlaylists","getPlaylist","getPlaylistTracks","createPlaylist","changePlaylistDetails","addTracksToPlaylist","uris","replaceTracksInPlaylist","reorderTracksInPlaylist","rangeStart","insertBefore","range_start","insert_before","removeTracksFromPlaylist","dataToBeSent","map","uri","tracks","removeTracksFromPlaylistWithSnapshotId","snapshotId","snapshot_id","removeTracksFromPlaylistInPositions","positions","getAlbum","albumId","getAlbumTracks","getAlbums","getTrack","trackId","getTracks","getArtist","artistId","getArtists","getArtistAlbums","getArtistTopTracks","countryId","country","getArtistRelatedArtists","getFeaturedPlaylists","getNewReleases","getCategories","getCategory","categoryId","getCategoryPlaylists","search","query","types","q","searchAlbums","searchArtists","searchTracks","searchPlaylists","getAudioFeaturesForTrack","getAudioFeaturesForTracks","getAudioAnalysisForTrack","getRecommendations","getAvailableGenreSeeds","getMyDevices","getMyCurrentPlaybackState","getMyCurrentPlayingTrack","transferMyPlayback","deviceIds","device_ids","play","device_id","field","newOptions","pause","skipToNext","skipToPrevious","seek","position_ms","setRepeat","state","setVolume","volume_percent","setShuffle","getAccessToken","setAccessToken","accessToken","setPromiseImplementation","PromiseImplementation","valid","p","then","catch","Error","module","exports"],"mappings":"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","sourcesContent":["/* global module */\n'use strict';\n\n/**\n * Class representing the API\n */\nvar SpotifyWebApi = (function() {\n  var _baseUri = 'https://api.spotify.com/v1';\n  var _accessToken = null;\n  var _promiseImplementation = null;\n\n  var WrapPromiseWithAbort = function(promise, onAbort) {\n    promise.abort = onAbort;\n    return promise;\n  };\n\n  var _promiseProvider = function(promiseFunction, onAbort) {\n    var returnedPromise;\n    if (_promiseImplementation !== null) {\n      var deferred = _promiseImplementation.defer();\n      promiseFunction(\n        function(resolvedResult) {\n          deferred.resolve(resolvedResult);\n        },\n        function(rejectedResult) {\n          deferred.reject(rejectedResult);\n        }\n      );\n      returnedPromise = deferred.promise;\n    } else {\n      if (window.Promise) {\n        returnedPromise = new window.Promise(promiseFunction);\n      }\n    }\n\n    if (returnedPromise) {\n      return new WrapPromiseWithAbort(returnedPromise, onAbort);\n    } else {\n      return null;\n    }\n  };\n\n  var _extend = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var target = args[0];\n    var objects = args.slice(1);\n    target = target || {};\n    objects.forEach(function(object) {\n      for (var j in object) {\n        if (object.hasOwnProperty(j)) {\n          target[j] = object[j];\n        }\n      }\n    });\n    return target;\n  };\n\n  var _buildUrl = function(url, parameters) {\n    var qs = '';\n    for (var key in parameters) {\n      if (parameters.hasOwnProperty(key)) {\n        var value = parameters[key];\n        qs += encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';\n      }\n    }\n    if (qs.length > 0) {\n      // chop off last '&'\n      qs = qs.substring(0, qs.length - 1);\n      url = url + '?' + qs;\n    }\n    return url;\n  };\n\n  var _performRequest = function(requestData, callback) {\n    var req = new XMLHttpRequest();\n\n    var promiseFunction = function(resolve, reject) {\n      function success(data) {\n        if (resolve) {\n          resolve(data);\n        }\n        if (callback) {\n          callback(null, data);\n        }\n      }\n\n      function failure() {\n        if (reject) {\n          reject(req);\n        }\n        if (callback) {\n          callback(req, null);\n        }\n      }\n\n      var type = requestData.type || 'GET';\n      req.open(type, _buildUrl(requestData.url, requestData.params));\n      if (_accessToken) {\n        req.setRequestHeader('Authorization', 'Bearer ' + _accessToken);\n      }\n\n      req.onreadystatechange = function() {\n        if (req.readyState === 4) {\n          var data = null;\n          try {\n            data = req.responseText ? JSON.parse(req.responseText) : '';\n          } catch (e) {\n            console.error(e);\n          }\n\n          if (req.status >= 200 && req.status < 300) {\n            success(data);\n          } else {\n            failure();\n          }\n        }\n      };\n\n      if (type === 'GET') {\n        req.send(null);\n      } else {\n        req.send(requestData.postData ? JSON.stringify(requestData.postData) : null);\n      }\n    };\n\n    if (callback) {\n      promiseFunction();\n      return null;\n    } else {\n      return _promiseProvider(promiseFunction, function() {\n        req.abort();\n      });\n    }\n  };\n\n  var _checkParamsAndPerformRequest = function(requestData, options, callback, optionsAlwaysExtendParams) {\n    var opt = {};\n    var cb = null;\n\n    if (typeof options === 'object') {\n      opt = options;\n      cb = callback;\n    } else if (typeof options === 'function') {\n      cb = options;\n    }\n\n    // options extend postData, if any. Otherwise they extend parameters sent in the url\n    var type = requestData.type || 'GET';\n    if (type !== 'GET' && requestData.postData && !optionsAlwaysExtendParams) {\n      requestData.postData = _extend(requestData.postData, opt);\n    } else {\n      requestData.params = _extend(requestData.params, opt);\n    }\n    return _performRequest(requestData, cb);\n  };\n\n  /**\n   * Creates an instance of the wrapper\n   * @constructor\n   */\n  var Constr = function() {};\n\n  Constr.prototype = {\n    constructor: SpotifyWebApi\n  };\n\n  /**\n   * Fetches a resource through a generic GET request.\n   *\n   * @param {string} url The URL to be fetched\n   * @param {function(Object,Object)} callback An optional callback\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getGeneric = function(url, callback) {\n    var requestData = {\n      url: url\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Fetches information about the current user.\n   * See [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMe = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches current user's saved tracks.\n   * See [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds a list of tracks to the current user's saved tracks.\n   * See [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'PUT',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove a list of tracks from the current user's saved tracks.\n   * See [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'DELETE',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Checks if the current user's saved tracks contains a certain list of tracks.\n   * See [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks/contains',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of the albums saved in the current Spotify user's \"Your Music\" library.\n   * See [Get Current User's Saved Albums](https://developer.spotify.com/web-api/get-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedAlbums = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Save one or more albums to the current user's \"Your Music\" library.\n   * See [Save Albums for Current User](https://developer.spotify.com/web-api/save-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'PUT',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove one or more albums from the current user's \"Your Music\" library.\n   * See [Remove Albums for Current User](https://developer.spotify.com/web-api/remove-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'DELETE',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Check if one or more albums is already saved in the current Spotify user's \"Your Music\" library.\n   * See [Check User's Saved Albums](https://developer.spotify.com/web-api/check-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums/contains',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top artists based on calculated affinity.\n   * See [Get a User’s Top Artists](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopArtists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top tracks based on calculated affinity.\n   * See [Get a User’s Top Tracks](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get tracks from the current user’s recently played tracks.\n   * See [Get Current User’s Recently Played Tracks](https://developer.spotify.com/web-api/web-api-personalization-endpoints/get-recently-played/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyRecentlyPlayedTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/recently-played'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more other Spotify users.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more artists.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Add the current user as a follower of one playlist.\n   * See [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} ownerId The id of the playlist owner. If you know the Spotify URI of\n   * the playlist, it is easy to find the owner's user id\n   * (e.g. spotify:user:<here_is_the_owner_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed. For instance,\n   * whether you want the playlist to be followed privately ({public: false})\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followPlaylist = function(ownerId, playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(ownerId) + '/playlists/' + playlistId + '/followers',\n      type: 'PUT',\n      postData: {}\n    };\n\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more other Spotify users.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more artists.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Remove the current user as a follower of one playlist.\n   * See [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} ownerId The id of the playlist owner. If you know the Spotify URI of\n   * the playlist, it is easy to find the owner's user id\n   * (e.g. spotify:user:<here_is_the_owner_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowPlaylist = function(ownerId, playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(ownerId) + '/playlists/' + playlistId + '/followers',\n      type: 'DELETE'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more other Spotify users.\n   * See [Check if Current User Follows Users or Artists](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the users sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more artists.\n   * See [Check if Current User Follows](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the artists sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Check to see if one or more Spotify users are following a specified playlist.\n   * See [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} ownerId The id of the playlist owner. If you know the Spotify URI of\n   * the playlist, it is easy to find the owner's user id\n   * (e.g. spotify:user:<here_is_the_owner_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the users are following the playlist sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.areFollowingPlaylist = function(ownerId, playlistId, userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(ownerId) + '/playlists/' + playlistId + '/followers/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Get the current user's followed artists.\n   * See [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} [options] Options, being after and limit.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an object with a paged object containing\n   * artists.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * artists objects. Not returned if a callback is given.\n   */\n  Constr.prototype.getFollowedArtists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following',\n      type: 'GET',\n      params: {\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches information about a specific user.\n   * See [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUser = function(userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId)\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of the current user's playlists.\n   * See [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUserPlaylists = function(userId, options, callback) {\n    var requestData;\n    if (typeof userId === 'string') {\n      requestData = {\n        url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists'\n      };\n    } else {\n      requestData = {\n        url: _baseUri + '/me/playlists'\n      };\n      callback = options;\n      options = userId;\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a specific playlist.\n   * See [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylist = function(userId, playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks from a specific playlist.\n   * See [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylistTracks = function(userId, playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Creates a playlist and stores it in the current user's library.\n   * See [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. You may want to user the \"getMe\" function to\n   * find out the id of the current logged in user\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.createPlaylist = function(userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists',\n      type: 'POST',\n      postData: options\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Change a playlist's name and public/private state\n   * See [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. You may want to user the \"getMe\" function to\n   * find out the id of the current logged in user\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} data A JSON object with the data to update. E.g. {name: 'A new name', public: true}\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.changePlaylistDetails = function(userId, playlistId, data, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId,\n      type: 'PUT',\n      postData: data\n    };\n    return _checkParamsAndPerformRequest(requestData, data, callback);\n  };\n\n  /**\n   * Add tracks to a playlist.\n   * See [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addTracksToPlaylist = function(userId, playlistId, uris, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks',\n      type: 'POST',\n      postData: {\n        uris: uris\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback, true);\n  };\n\n  /**\n   * Replace the tracks of a playlist\n   * See [Replace a Playlist's Tracks](https://developer.spotify.com/web-api/replace-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.replaceTracksInPlaylist = function(userId, playlistId, uris, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: { uris: uris }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Reorder tracks in a playlist\n   * See [Reorder a Playlist’s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {number} rangeStart The position of the first track to be reordered.\n   * @param {number} insertBefore The position where the tracks should be inserted. To reorder the tracks to\n   * the end of the playlist, simply set insert_before to the position after the last track.\n   * @param {Object} options An object with optional parameters (range_length, snapshot_id)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.reorderTracksInPlaylist = function(userId, playlistId, rangeStart, insertBefore, options, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: {\n        range_start: rangeStart,\n        insert_before: insertBefore\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylist = function(userId, playlistId, uris, callback) {\n    var dataToBeSent = uris.map(function(uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: { tracks: dataToBeSent }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying a snapshot id.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistWithSnapshotId = function(userId, playlistId, uris, snapshotId, callback) {\n    var dataToBeSent = uris.map(function(uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        tracks: dataToBeSent,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying the positions of the tracks to be removed.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the user id (e.g. spotify:user:<here_is_the_user_id>:playlist:xxxx)\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<number>} positions array of integers containing the positions of the tracks to remove\n   * from the playlist.\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistInPositions = function(userId, playlistId, positions, snapshotId, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        positions: positions,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Fetches an album from the Spotify catalog.\n   * See [Get an Album](https://developer.spotify.com/web-api/get-album/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbum = function(albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks of an album from the Spotify catalog.\n   * See [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbumTracks = function(albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple albums from the Spotify catalog.\n   * See [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a track from the Spotify catalog.\n   * See [Get a Track](https://developer.spotify.com/web-api/get-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTrack = function(trackId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/tracks/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple tracks from the Spotify catalog.\n   * See [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/tracks/',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches an artist from the Spotify catalog.\n   * See [Get an Artist](https://developer.spotify.com/web-api/get-artist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtist = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple artists from the Spotify catalog.\n   * See [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtists = function(artistIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/',\n      params: { ids: artistIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the albums of an artist from the Spotify catalog.\n   * See [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistAlbums = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of top tracks of an artist from the Spotify catalog, for a specific country.\n   * See [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {string} countryId The id of the country (e.g. ES for Spain or US for United States)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistTopTracks = function(artistId, countryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/top-tracks',\n      params: { country: countryId }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of artists related with a given one from the Spotify catalog.\n   * See [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistRelatedArtists = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/related-artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of Spotify featured playlists (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getFeaturedPlaylists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/featured-playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of new album releases featured in Spotify (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getNewReleases = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/new-releases'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a List of Categories](https://developer.spotify.com/web-api/get-list-categories/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategories = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a single category used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a Category](https://developer.spotify.com/web-api/get-category/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategory = function(categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of Spotify playlists tagged with a particular category.\n   * See [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategoryPlaylists = function(categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId + '/playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get Spotify catalog information about artists, albums, tracks or playlists that match a keyword string.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Array<string>} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', and 'track'.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.search = function(query, types, options, callback) {\n    var requestData = {\n      url: _baseUri + '/search/',\n      params: {\n        q: query,\n        type: types.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches albums from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchAlbums = function(query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  };\n\n  /**\n   * Fetches artists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchArtists = function(query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  };\n\n  /**\n   * Fetches tracks from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchTracks = function(query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  };\n\n  /**\n   * Fetches playlists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchPlaylists = function(query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  };\n\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * See [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTrack = function(trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-features/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio features for multiple tracks based on their Spotify IDs.\n   * See [Get Audio Features for Several Tracks](https://developer.spotify.com/web-api/get-several-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTracks = function(trackIds, callback) {\n    var requestData = {\n      url: _baseUri + '/audio-features',\n      params: { ids: trackIds }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * See [Get Audio Analysis for a Track](https://developer.spotify.com/web-api/get-audio-analysis/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioAnalysisForTrack = function(trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-analysis/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * See [Get Recommendations Based on Seeds](https://developer.spotify.com/web-api/get-recommendations/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getRecommendations = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * See [Available Genre Seeds](https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAvailableGenreSeeds = function(callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations/available-genre-seeds'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about a user’s available devices.\n   * See [Get a User’s Available Devices](https://developer.spotify.com/web-api/get-a-users-available-devices/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyDevices = function(callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/devices'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about the user’s current playback state, including track, track progress, and active device.\n   * See [Get Information About The User’s Current Playback](https://developer.spotify.com/web-api/get-information-about-the-users-current-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlaybackState = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the object currently being played on the user’s Spotify account.\n   * See [Get the User’s Currently Playing Track](https://developer.spotify.com/web-api/get-the-users-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlayingTrack = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/currently-playing'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Transfer playback to a new device and determine if it should start playing.\n   * See [Transfer a User’s Playback](https://developer.spotify.com/web-api/transfer-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} deviceIds A JSON array containing the ID of the device on which playback should be started/transferred.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.transferMyPlayback = function(deviceIds, options, callback) {\n    var postData = options || {};\n    postData.device_ids = deviceIds;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player',\n      postData: postData\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Start a new context or resume current playback on the user’s active device.\n   * See [Start/Resume a User’s Playback](https://developer.spotify.com/web-api/start-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.play = function(options, callback) {\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var postData = {};\n    ['context_uri', 'uris', 'offset'].forEach(function(field) {\n      if (field in options) {\n        postData[field] = options[field];\n      }\n    });\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/play',\n      params: params,\n      postData: postData\n    };\n\n    // need to clear options so it doesn't add all of them to the query params\n    var newOptions = typeof options === 'function' ? options : {};\n    return _checkParamsAndPerformRequest(requestData, newOptions, callback);\n  };\n\n  /**\n   * Pause playback on the user’s account.\n   * See [Pause a User’s Playback](https://developer.spotify.com/web-api/pause-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.pause = function(options, callback) {\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/pause',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to next track in the user’s queue.\n   * See [Skip User’s Playback To Next Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToNext = function(options, callback) {\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/next',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to previous track in the user’s queue.\n   * Note that this will ALWAYS skip to the previous track, regardless of the current track’s progress.\n   * Returning to the start of the current track should be performed using `.seek()`\n   * See [Skip User’s Playback To Previous Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToPrevious = function(options, callback) {\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/previous',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Seeks to the given position in the user’s currently playing track.\n   * See [Seek To Position In Currently Playing Track](https://developer.spotify.com/web-api/seek-to-position-in-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} position_ms The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.seek = function(position_ms, options, callback) {\n    var params = {\n      position_ms: position_ms\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/seek',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the repeat mode for the user’s playback. Options are repeat-track, repeat-context, and off.\n   * See [Set Repeat Mode On User’s Playback](https://developer.spotify.com/web-api/set-repeat-mode-on-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {String} state A string set to 'track', 'context' or 'off'.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setRepeat = function(state, options, callback) {\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/repeat',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the volume for the user’s current playback device.\n   * See [Set Volume For User’s Playback](https://developer.spotify.com/web-api/set-volume-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} volume_percent The volume to set. Must be a value from 0 to 100 inclusive.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setVolume = function(volume_percent, options, callback) {\n    var params = {\n      volume_percent: volume_percent\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/volume',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Toggle shuffle on or off for user’s playback.\n   * See [Toggle Shuffle For User’s Playback](https://developer.spotify.com/web-api/toggle-shuffle-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {bool} state Whether or not to shuffle user's playback.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setShuffle = function(state, options, callback) {\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/shuffle',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Gets the access token in use.\n   *\n   * @return {string} accessToken The access token\n   */\n  Constr.prototype.getAccessToken = function() {\n    return _accessToken;\n  };\n\n  /**\n   * Sets the access token to be used.\n   * See [the Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/) on\n   * the Spotify Developer site for more information about obtaining an access token.\n   *\n   * @param {string} accessToken The access token\n   * @return {void}\n   */\n  Constr.prototype.setAccessToken = function(accessToken) {\n    _accessToken = accessToken;\n  };\n\n  /**\n   * Sets an implementation of Promises/A+ to be used. E.g. Q, when.\n   * See [Conformant Implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md)\n   * for a list of some available options\n   *\n   * @param {Object} PromiseImplementation A Promises/A+ valid implementation\n   * @throws {Error} If the implementation being set doesn't conform with Promises/A+\n   * @return {void}\n   */\n  Constr.prototype.setPromiseImplementation = function(PromiseImplementation) {\n    var valid = false;\n    try {\n      var p = new PromiseImplementation(function(resolve) {\n        resolve();\n      });\n      if (typeof p.then === 'function' && typeof p.catch === 'function') {\n        valid = true;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    if (valid) {\n      _promiseImplementation = PromiseImplementation;\n    } else {\n      throw new Error('Unsupported implementation of Promises/A+');\n    }\n  };\n\n  return Constr;\n})();\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n  module.exports = SpotifyWebApi;\n}\n"]},"metadata":{},"sourceType":"script"}