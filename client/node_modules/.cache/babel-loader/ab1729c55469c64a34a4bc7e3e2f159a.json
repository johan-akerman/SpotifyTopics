{"ast":null,"code":"/* global module */\n'use strict';\n/**\r\n * Class representing the API\r\n */\n\nvar SpotifyWebApi = function () {\n  var _baseUri = 'https://api.spotify.com/v1';\n  var _accessToken = null;\n  var _promiseImplementation = null;\n\n  var WrapPromiseWithAbort = function (promise, onAbort) {\n    promise.abort = onAbort;\n    return promise;\n  };\n\n  var _promiseProvider = function (promiseFunction, onAbort) {\n    var returnedPromise;\n\n    if (_promiseImplementation !== null) {\n      var deferred = _promiseImplementation.defer();\n\n      promiseFunction(function (resolvedResult) {\n        deferred.resolve(resolvedResult);\n      }, function (rejectedResult) {\n        deferred.reject(rejectedResult);\n      });\n      returnedPromise = deferred.promise;\n    } else {\n      if (window.Promise) {\n        returnedPromise = new window.Promise(promiseFunction);\n      }\n    }\n\n    if (returnedPromise) {\n      return new WrapPromiseWithAbort(returnedPromise, onAbort);\n    } else {\n      return null;\n    }\n  };\n\n  var _extend = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var target = args[0];\n    var objects = args.slice(1);\n    target = target || {};\n    objects.forEach(function (object) {\n      for (var j in object) {\n        if (object.hasOwnProperty(j)) {\n          target[j] = object[j];\n        }\n      }\n    });\n    return target;\n  };\n\n  var _buildUrl = function (url, parameters) {\n    var qs = '';\n\n    for (var key in parameters) {\n      if (parameters.hasOwnProperty(key)) {\n        var value = parameters[key];\n        qs += encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';\n      }\n    }\n\n    if (qs.length > 0) {\n      // chop off last '&'\n      qs = qs.substring(0, qs.length - 1);\n      url = url + '?' + qs;\n    }\n\n    return url;\n  };\n\n  var _performRequest = function (requestData, callback) {\n    var req = new XMLHttpRequest();\n\n    var promiseFunction = function (resolve, reject) {\n      function success(data) {\n        if (resolve) {\n          resolve(data);\n        }\n\n        if (callback) {\n          callback(null, data);\n        }\n      }\n\n      function failure() {\n        if (reject) {\n          reject(req);\n        }\n\n        if (callback) {\n          callback(req, null);\n        }\n      }\n\n      var type = requestData.type || 'GET';\n      req.open(type, _buildUrl(requestData.url, requestData.params));\n\n      if (_accessToken) {\n        req.setRequestHeader('Authorization', 'Bearer ' + _accessToken);\n      }\n\n      if (requestData.contentType) {\n        req.setRequestHeader('Content-Type', requestData.contentType);\n      }\n\n      req.onreadystatechange = function () {\n        if (req.readyState === 4) {\n          var data = null;\n\n          try {\n            data = req.responseText ? JSON.parse(req.responseText) : '';\n          } catch (e) {\n            console.error(e);\n          }\n\n          if (req.status >= 200 && req.status < 300) {\n            success(data);\n          } else {\n            failure();\n          }\n        }\n      };\n\n      if (type === 'GET') {\n        req.send(null);\n      } else {\n        var postData = null;\n\n        if (requestData.postData) {\n          postData = requestData.contentType === 'image/jpeg' ? requestData.postData : JSON.stringify(requestData.postData);\n        }\n\n        req.send(postData);\n      }\n    };\n\n    if (callback) {\n      promiseFunction();\n      return null;\n    } else {\n      return _promiseProvider(promiseFunction, function () {\n        req.abort();\n      });\n    }\n  };\n\n  var _checkParamsAndPerformRequest = function (requestData, options, callback, optionsAlwaysExtendParams) {\n    var opt = {};\n    var cb = null;\n\n    if (typeof options === 'object') {\n      opt = options;\n      cb = callback;\n    } else if (typeof options === 'function') {\n      cb = options;\n    } // options extend postData, if any. Otherwise they extend parameters sent in the url\n\n\n    var type = requestData.type || 'GET';\n\n    if (type !== 'GET' && requestData.postData && !optionsAlwaysExtendParams) {\n      requestData.postData = _extend(requestData.postData, opt);\n    } else {\n      requestData.params = _extend(requestData.params, opt);\n    }\n\n    return _performRequest(requestData, cb);\n  };\n  /**\r\n   * Creates an instance of the wrapper\r\n   * @constructor\r\n   */\n\n\n  var Constr = function () {};\n\n  Constr.prototype = {\n    constructor: SpotifyWebApi\n  };\n  /**\r\n   * Fetches a resource through a generic GET request.\r\n   *\r\n   * @param {string} url The URL to be fetched\r\n   * @param {function(Object,Object)} callback An optional callback\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n  Constr.prototype.getGeneric = function (url, callback) {\n    var requestData = {\n      url: url\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\r\n   * Fetches information about the current user.\r\n   * See [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getMe = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches current user's saved tracks.\r\n   * See [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getMySavedTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Adds a list of tracks to the current user's saved tracks.\r\n   * See [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\r\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.addToMySavedTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'PUT',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Remove a list of tracks from the current user's saved tracks.\r\n   * See [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\r\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.removeFromMySavedTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'DELETE',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Checks if the current user's saved tracks contains a certain list of tracks.\r\n   * See [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\r\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.containsMySavedTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks/contains',\n      params: {\n        ids: trackIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Get a list of the albums saved in the current Spotify user's \"Your Music\" library.\r\n   * See [Get Current User's Saved Albums](https://developer.spotify.com/web-api/get-users-saved-albums/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getMySavedAlbums = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Save one or more albums to the current user's \"Your Music\" library.\r\n   * See [Save Albums for Current User](https://developer.spotify.com/web-api/save-albums-user/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\r\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.addToMySavedAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'PUT',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Remove one or more albums from the current user's \"Your Music\" library.\r\n   * See [Remove Albums for Current User](https://developer.spotify.com/web-api/remove-albums-user/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\r\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.removeFromMySavedAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'DELETE',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Check if one or more albums is already saved in the current Spotify user's \"Your Music\" library.\r\n   * See [Check User's Saved Albums](https://developer.spotify.com/web-api/check-users-saved-albums/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\r\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.containsMySavedAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums/contains',\n      params: {\n        ids: albumIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Get the current user’s top artists based on calculated affinity.\r\n   * See [Get a User’s Top Artists](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getMyTopArtists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Get the current user’s top tracks based on calculated affinity.\r\n   * See [Get a User’s Top Tracks](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getMyTopTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Get tracks from the current user’s recently played tracks.\r\n   * See [Get Current User’s Recently Played Tracks](https://developer.spotify.com/web-api/web-api-personalization-endpoints/get-recently-played/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getMyRecentlyPlayedTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/recently-played'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Adds the current user as a follower of one or more other Spotify users.\r\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\r\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.followUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\r\n   * Adds the current user as a follower of one or more artists.\r\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\r\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.followArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\r\n   * Add the current user as a follower of one playlist.\r\n   * See [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed. For instance,\r\n   * whether you want the playlist to be followed privately ({public: false})\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.followPlaylist = function (playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'PUT',\n      postData: {}\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Removes the current user as a follower of one or more other Spotify users.\r\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\r\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.unfollowUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\r\n   * Removes the current user as a follower of one or more artists.\r\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\r\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.unfollowArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\r\n   * Remove the current user as a follower of one playlist.\r\n   * See [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.unfollowPlaylist = function (playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'DELETE'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\r\n   * Checks to see if the current user is following one or more other Spotify users.\r\n   * See [Check if Current User Follows Users or Artists](https://developer.spotify.com/web-api/check-current-user-follows/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\r\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\r\n   * whether the user is following the users sent in the request.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.isFollowingUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\r\n   * Checks to see if the current user is following one or more artists.\r\n   * See [Check if Current User Follows](https://developer.spotify.com/web-api/check-current-user-follows/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\r\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\r\n   * whether the user is following the artists sent in the request.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.isFollowingArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\r\n   * Check to see if one or more Spotify users are following a specified playlist.\r\n   * See [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\r\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\r\n   * whether the users are following the playlist sent in the request.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.areFollowingPlaylist = function (playlistId, userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\r\n   * Get the current user's followed artists.\r\n   * See [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} [options] Options, being after and limit.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an object with a paged object containing\r\n   * artists.\r\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\r\n   * artists objects. Not returned if a callback is given.\r\n   */\n\n\n  Constr.prototype.getFollowedArtists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following',\n      type: 'GET',\n      params: {\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches information about a specific user.\r\n   * See [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\r\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getUser = function (userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId)\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches a list of the current user's playlists.\r\n   * See [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\r\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\r\n   * the permissions will be used.\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getUserPlaylists = function (userId, options, callback) {\n    var requestData;\n\n    if (typeof userId === 'string') {\n      requestData = {\n        url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists'\n      };\n    } else {\n      requestData = {\n        url: _baseUri + '/me/playlists'\n      };\n      callback = options;\n      options = userId;\n    }\n\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches a specific playlist.\r\n   * See [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getPlaylist = function (playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches the tracks from a specific playlist.\r\n   * See [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getPlaylistTracks = function (playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Gets the current image associated with a specific playlist.\r\n   * See [Get a Playlist Cover Image](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist-cover/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:playlist:<here_is_the_playlist_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getPlaylistCoverImage = function (playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/images'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n  /**\r\n   * Creates a playlist and stores it in the current user's library.\r\n   * See [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\r\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.createPlaylist = function (userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists',\n      type: 'POST',\n      postData: options\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Change a playlist's name and public/private state\r\n   * See [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Object} data A JSON object with the data to update. E.g. {name: 'A new name', public: true}\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.changePlaylistDetails = function (playlistId, data, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId,\n      type: 'PUT',\n      postData: data\n    };\n    return _checkParamsAndPerformRequest(requestData, data, callback);\n  };\n  /**\r\n   * Add tracks to a playlist.\r\n   * See [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.addTracksToPlaylist = function (playlistId, uris, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'POST',\n      postData: {\n        uris: uris\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback, true);\n  };\n  /**\r\n   * Replace the tracks of a playlist\r\n   * See [Replace a Playlist's Tracks](https://developer.spotify.com/web-api/replace-playlists-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.replaceTracksInPlaylist = function (playlistId, uris, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: {\n        uris: uris\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\r\n   * Reorder tracks in a playlist\r\n   * See [Reorder a Playlist’s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {number} rangeStart The position of the first track to be reordered.\r\n   * @param {number} insertBefore The position where the tracks should be inserted. To reorder the tracks to\r\n   * the end of the playlist, simply set insert_before to the position after the last track.\r\n   * @param {Object} options An object with optional parameters (range_length, snapshot_id)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.reorderTracksInPlaylist = function (playlistId, rangeStart, insertBefore, options, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: {\n        range_start: rangeStart,\n        insert_before: insertBefore\n      }\n    };\n    /* eslint-enable camelcase */\n\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Remove tracks from a playlist\r\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\r\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\r\n   * string) and `positions` (which is an array of integers).\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.removeTracksFromPlaylist = function (playlistId, uris, callback) {\n    var dataToBeSent = uris.map(function (uri) {\n      if (typeof uri === 'string') {\n        return {\n          uri: uri\n        };\n      } else {\n        return uri;\n      }\n    });\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        tracks: dataToBeSent\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\r\n   * Remove tracks from a playlist, specifying a snapshot id.\r\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\r\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\r\n   * string) and `positions` (which is an array of integers).\r\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.removeTracksFromPlaylistWithSnapshotId = function (playlistId, uris, snapshotId, callback) {\n    var dataToBeSent = uris.map(function (uri) {\n      if (typeof uri === 'string') {\n        return {\n          uri: uri\n        };\n      } else {\n        return uri;\n      }\n    });\n    /* eslint-disable camelcase */\n\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        tracks: dataToBeSent,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\r\n   * Remove tracks from a playlist, specifying the positions of the tracks to be removed.\r\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Array<number>} positions array of integers containing the positions of the tracks to remove\r\n   * from the playlist.\r\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.removeTracksFromPlaylistInPositions = function (playlistId, positions, snapshotId, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        positions: positions,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\r\n   * Upload a custom playlist cover image.\r\n   * See [Upload A Custom Playlist Cover Image](https://developer.spotify.com/web-api/upload-a-custom-playlist-cover-image/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {string} imageData Base64 encoded JPEG image data, maximum payload size is 256 KB.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.uploadCustomPlaylistCoverImage = function (playlistId, imageData, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/images',\n      type: 'PUT',\n      postData: imageData.replace(/^data:image\\/jpeg;base64,/, ''),\n      contentType: 'image/jpeg'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\r\n   * Fetches an album from the Spotify catalog.\r\n   * See [Get an Album](https://developer.spotify.com/web-api/get-album/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\r\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getAlbum = function (albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches the tracks of an album from the Spotify catalog.\r\n   * See [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\r\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getAlbumTracks = function (albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches multiple albums from the Spotify catalog.\r\n   * See [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI it is easy\r\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/',\n      params: {\n        ids: albumIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches a track from the Spotify catalog.\r\n   * See [Get a Track](https://developer.spotify.com/web-api/get-track/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\r\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getTrack = function (trackId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/tracks/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches multiple tracks from the Spotify catalog.\r\n   * See [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\r\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/tracks/',\n      params: {\n        ids: trackIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches an artist from the Spotify catalog.\r\n   * See [Get an Artist](https://developer.spotify.com/web-api/get-artist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\r\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getArtist = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches multiple artists from the Spotify catalog.\r\n   * See [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\r\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getArtists = function (artistIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/',\n      params: {\n        ids: artistIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches the albums of an artist from the Spotify catalog.\r\n   * See [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\r\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getArtistAlbums = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches a list of top tracks of an artist from the Spotify catalog, for a specific country.\r\n   * See [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\r\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {string} countryId The id of the country (e.g. ES for Spain or US for United States)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getArtistTopTracks = function (artistId, countryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/top-tracks',\n      params: {\n        country: countryId\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches a list of artists related with a given one from the Spotify catalog.\r\n   * See [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\r\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getArtistRelatedArtists = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/related-artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches a list of Spotify featured playlists (shown, for example, on a Spotify player's \"Browse\" tab).\r\n   * See [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getFeaturedPlaylists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/featured-playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches a list of new album releases featured in Spotify (shown, for example, on a Spotify player's \"Browse\" tab).\r\n   * See [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getNewReleases = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/new-releases'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\r\n   * See [Get a List of Categories](https://developer.spotify.com/web-api/get-list-categories/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getCategories = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Get a single category used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\r\n   * See [Get a Category](https://developer.spotify.com/web-api/get-category/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getCategory = function (categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Get a list of Spotify playlists tagged with a particular category.\r\n   * See [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getCategoryPlaylists = function (categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId + '/playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Get Spotify catalog information about artists, albums, tracks or playlists that match a keyword string.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Array<string>} types An array of item types to search across.\r\n   * Valid types are: 'album', 'artist', 'playlist', and 'track'.\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.search = function (query, types, options, callback) {\n    var requestData = {\n      url: _baseUri + '/search/',\n      params: {\n        q: query,\n        type: types.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches albums from the Spotify catalog according to a query.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.searchAlbums = function (query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  };\n  /**\r\n   * Fetches artists from the Spotify catalog according to a query.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.searchArtists = function (query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  };\n  /**\r\n   * Fetches tracks from the Spotify catalog according to a query.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.searchTracks = function (query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  };\n  /**\r\n   * Fetches playlists from the Spotify catalog according to a query.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.searchPlaylists = function (query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  };\n  /**\r\n   * Fetches shows from the Spotify catalog according to a query.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.searchShows = function (query, options, callback) {\n    return this.search(query, ['show'], options, callback);\n  };\n  /**\r\n   * Fetches episodes from the Spotify catalog according to a query.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.searchEpisodes = function (query, options, callback) {\n    return this.search(query, ['episode'], options, callback);\n  };\n  /**\r\n   * Get audio features for a single track identified by its unique Spotify ID.\r\n   * See [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\r\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getAudioFeaturesForTrack = function (trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-features/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\r\n   * Get audio features for multiple tracks based on their Spotify IDs.\r\n   * See [Get Audio Features for Several Tracks](https://developer.spotify.com/web-api/get-several-audio-features/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\r\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getAudioFeaturesForTracks = function (trackIds, callback) {\n    var requestData = {\n      url: _baseUri + '/audio-features',\n      params: {\n        ids: trackIds\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\r\n   * Get audio analysis for a single track identified by its unique Spotify ID.\r\n   * See [Get Audio Analysis for a Track](https://developer.spotify.com/web-api/get-audio-analysis/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\r\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getAudioAnalysisForTrack = function (trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-analysis/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\r\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\r\n   * See [Get Recommendations Based on Seeds](https://developer.spotify.com/web-api/get-recommendations/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getRecommendations = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Retrieve a list of available genres seed parameter values for recommendations.\r\n   * See [Available Genre Seeds](https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getAvailableGenreSeeds = function (callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations/available-genre-seeds'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\r\n   * Get information about a user’s available devices.\r\n   * See [Get a User’s Available Devices](https://developer.spotify.com/web-api/get-a-users-available-devices/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getMyDevices = function (callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/devices'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n  /**\r\n   * Get information about the user’s current playback state, including track, track progress, and active device.\r\n   * See [Get Information About The User’s Current Playback](https://developer.spotify.com/web-api/get-information-about-the-users-current-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getMyCurrentPlaybackState = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Get the object currently being played on the user’s Spotify account.\r\n   * See [Get the User’s Currently Playing Track](https://developer.spotify.com/web-api/get-the-users-currently-playing-track/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getMyCurrentPlayingTrack = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/currently-playing'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Transfer playback to a new device and determine if it should start playing.\r\n   * See [Transfer a User’s Playback](https://developer.spotify.com/web-api/transfer-a-users-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} deviceIds A JSON array containing the ID of the device on which playback should be started/transferred.\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.transferMyPlayback = function (deviceIds, options, callback) {\n    var postData = options || {};\n    postData.device_ids = deviceIds;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player',\n      postData: postData\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Start a new context or resume current playback on the user’s active device.\r\n   * See [Start/Resume a User’s Playback](https://developer.spotify.com/web-api/start-a-users-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.play = function (options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {\n      device_id: options.device_id\n    } : null;\n    var postData = {};\n    ['context_uri', 'uris', 'offset', 'position_ms'].forEach(function (field) {\n      if (field in options) {\n        postData[field] = options[field];\n      }\n    });\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/play',\n      params: params,\n      postData: postData\n    }; // need to clear options so it doesn't add all of them to the query params\n\n    var newOptions = typeof options === 'function' ? options : {};\n    return _checkParamsAndPerformRequest(requestData, newOptions, callback);\n  };\n  /**\r\n   * Pause playback on the user’s account.\r\n   * See [Pause a User’s Playback](https://developer.spotify.com/web-api/pause-a-users-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.pause = function (options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {\n      device_id: options.device_id\n    } : null;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/pause',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Skips to next track in the user’s queue.\r\n   * See [Skip User’s Playback To Next Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.skipToNext = function (options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {\n      device_id: options.device_id\n    } : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/next',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Skips to previous track in the user’s queue.\r\n   * Note that this will ALWAYS skip to the previous track, regardless of the current track’s progress.\r\n   * Returning to the start of the current track should be performed using `.seek()`\r\n   * See [Skip User’s Playback To Previous Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.skipToPrevious = function (options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {\n      device_id: options.device_id\n    } : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/previous',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Seeks to the given position in the user’s currently playing track.\r\n   * See [Seek To Position In Currently Playing Track](https://developer.spotify.com/web-api/seek-to-position-in-currently-playing-track/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {number} position_ms The position in milliseconds to seek to. Must be a positive number.\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.seek = function (position_ms, options, callback) {\n    options = options || {};\n    var params = {\n      position_ms: position_ms\n    };\n\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/seek',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Set the repeat mode for the user’s playback. Options are repeat-track, repeat-context, and off.\r\n   * See [Set Repeat Mode On User’s Playback](https://developer.spotify.com/web-api/set-repeat-mode-on-users-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {String} state A string set to 'track', 'context' or 'off'.\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.setRepeat = function (state, options, callback) {\n    options = options || {};\n    var params = {\n      state: state\n    };\n\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/repeat',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Set the volume for the user’s current playback device.\r\n   * See [Set Volume For User’s Playback](https://developer.spotify.com/web-api/set-volume-for-users-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {number} volume_percent The volume to set. Must be a value from 0 to 100 inclusive.\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.setVolume = function (volume_percent, options, callback) {\n    options = options || {};\n    var params = {\n      volume_percent: volume_percent\n    };\n\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/volume',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Toggle shuffle on or off for user’s playback.\r\n   * See [Toggle Shuffle For User’s Playback](https://developer.spotify.com/web-api/toggle-shuffle-for-users-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {bool} state Whether or not to shuffle user's playback.\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.setShuffle = function (state, options, callback) {\n    options = options || {};\n    var params = {\n      state: state\n    };\n\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/shuffle',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches a show from the Spotify catalog.\r\n   * See [Get a Show](https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} showId The id of the show. If you know the Spotify URI it is easy\r\n   * to find the show id (e.g. spotify:show:<here_is_the_show_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getShow = function (showId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/shows/' + showId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches multiple shows from the Spotify catalog.\r\n   * See [Get Several Shows](https://developer.spotify.com/documentation/web-api/reference/shows/get-several-shows/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\r\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getShows = function (showIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/shows/',\n      params: {\n        ids: showIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches current user's saved shows.\r\n   * See [Get Current User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-shows/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getMySavedShows = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/shows'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Adds a list of shows to the current user's saved shows.\r\n   * See [Save Shows for Current User](https://developer.spotify.com/documentation/web-api/reference/library/save-shows-user/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\r\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.addToMySavedShows = function (showIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/shows',\n      type: 'PUT',\n      postData: showIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Remove a list of shows from the current user's saved shows.\r\n   * See [Remove Shows for Current User](https://developer.spotify.com/documentation/web-api/reference/library/remove-shows-user/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\r\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.removeFromMySavedShows = function (showIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/shows',\n      type: 'DELETE',\n      postData: showIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Checks if the current user's saved shows contains a certain list of shows.\r\n   * See [Check Current User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-shows/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\r\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.containsMySavedShows = function (showIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/shows/contains',\n      params: {\n        ids: showIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches the episodes of a show from the Spotify catalog.\r\n   * See [Get a Show's Episodes](https://developer.spotify.com/documentation/web-api/reference/shows/get-shows-episodes/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} showId The id of the show. If you know the Spotify URI it is easy\r\n   * to find the show id (e.g. spotify:show:<here_is_the_show_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getShowEpisodes = function (showId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/shows/' + showId + '/episodes'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches an episode from the Spotify catalog.\r\n   * See [Get an Episode](https://developer.spotify.com/documentation/web-api/reference/episodes/get-an-episode/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} episodeId The id of the episode. If you know the Spotify URI it is easy\r\n   * to find the episode id (e.g. spotify:episode:<here_is_the_episode_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getEpisode = function (episodeId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/episodes/' + episodeId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Fetches multiple episodes from the Spotify catalog.\r\n   * See [Get Several Episodes](https://developer.spotify.com/documentation/web-api/reference/episodes/get-several-episodes/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} episodeIds The ids of the episodes. If you know their Spotify URI it is easy\r\n   * to find their episode id (e.g. spotify:episode:<here_is_the_episode_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\n\n\n  Constr.prototype.getEpisodes = function (episodeIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/episodes/',\n      params: {\n        ids: episodeIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n  /**\r\n   * Gets the access token in use.\r\n   *\r\n   * @return {string} accessToken The access token\r\n   */\n\n\n  Constr.prototype.getAccessToken = function () {\n    return _accessToken;\n  };\n  /**\r\n   * Sets the access token to be used.\r\n   * See [the Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/) on\r\n   * the Spotify Developer site for more information about obtaining an access token.\r\n   *\r\n   * @param {string} accessToken The access token\r\n   * @return {void}\r\n   */\n\n\n  Constr.prototype.setAccessToken = function (accessToken) {\n    _accessToken = accessToken;\n  };\n  /**\r\n   * Sets an implementation of Promises/A+ to be used. E.g. Q, when.\r\n   * See [Conformant Implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md)\r\n   * for a list of some available options\r\n   *\r\n   * @param {Object} PromiseImplementation A Promises/A+ valid implementation\r\n   * @throws {Error} If the implementation being set doesn't conform with Promises/A+\r\n   * @return {void}\r\n   */\n\n\n  Constr.prototype.setPromiseImplementation = function (PromiseImplementation) {\n    var valid = false;\n\n    try {\n      var p = new PromiseImplementation(function (resolve) {\n        resolve();\n      });\n\n      if (typeof p.then === 'function' && typeof p.catch === 'function') {\n        valid = true;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    if (valid) {\n      _promiseImplementation = PromiseImplementation;\n    } else {\n      throw new Error('Unsupported implementation of Promises/A+');\n    }\n  };\n\n  return Constr;\n}();\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n  module.exports = SpotifyWebApi;\n}","map":{"version":3,"sources":["C:/Users/Johan desk/Desktop/projects/SpotifyTopics/client/node_modules/spotify-web-api-js/src/spotify-web-api.js"],"names":["SpotifyWebApi","_baseUri","_accessToken","_promiseImplementation","WrapPromiseWithAbort","promise","onAbort","abort","_promiseProvider","promiseFunction","returnedPromise","deferred","defer","resolvedResult","resolve","rejectedResult","reject","window","Promise","_extend","args","Array","prototype","slice","call","arguments","target","objects","forEach","object","j","hasOwnProperty","_buildUrl","url","parameters","qs","key","value","encodeURIComponent","length","substring","_performRequest","requestData","callback","req","XMLHttpRequest","success","data","failure","type","open","params","setRequestHeader","contentType","onreadystatechange","readyState","responseText","JSON","parse","e","console","error","status","send","postData","stringify","_checkParamsAndPerformRequest","options","optionsAlwaysExtendParams","opt","cb","Constr","constructor","getGeneric","getMe","getMySavedTracks","addToMySavedTracks","trackIds","removeFromMySavedTracks","containsMySavedTracks","ids","join","getMySavedAlbums","addToMySavedAlbums","albumIds","removeFromMySavedAlbums","containsMySavedAlbums","getMyTopArtists","getMyTopTracks","getMyRecentlyPlayedTracks","followUsers","userIds","followArtists","artistIds","followPlaylist","playlistId","unfollowUsers","unfollowArtists","unfollowPlaylist","isFollowingUsers","isFollowingArtists","areFollowingPlaylist","getFollowedArtists","getUser","userId","getUserPlaylists","getPlaylist","getPlaylistTracks","getPlaylistCoverImage","createPlaylist","changePlaylistDetails","addTracksToPlaylist","uris","replaceTracksInPlaylist","reorderTracksInPlaylist","rangeStart","insertBefore","range_start","insert_before","removeTracksFromPlaylist","dataToBeSent","map","uri","tracks","removeTracksFromPlaylistWithSnapshotId","snapshotId","snapshot_id","removeTracksFromPlaylistInPositions","positions","uploadCustomPlaylistCoverImage","imageData","replace","getAlbum","albumId","getAlbumTracks","getAlbums","getTrack","trackId","getTracks","getArtist","artistId","getArtists","getArtistAlbums","getArtistTopTracks","countryId","country","getArtistRelatedArtists","getFeaturedPlaylists","getNewReleases","getCategories","getCategory","categoryId","getCategoryPlaylists","search","query","types","q","searchAlbums","searchArtists","searchTracks","searchPlaylists","searchShows","searchEpisodes","getAudioFeaturesForTrack","getAudioFeaturesForTracks","getAudioAnalysisForTrack","getRecommendations","getAvailableGenreSeeds","getMyDevices","getMyCurrentPlaybackState","getMyCurrentPlayingTrack","transferMyPlayback","deviceIds","device_ids","play","device_id","field","newOptions","pause","skipToNext","skipToPrevious","seek","position_ms","setRepeat","state","setVolume","volume_percent","setShuffle","getShow","showId","getShows","showIds","getMySavedShows","addToMySavedShows","removeFromMySavedShows","containsMySavedShows","getShowEpisodes","getEpisode","episodeId","getEpisodes","episodeIds","getAccessToken","setAccessToken","accessToken","setPromiseImplementation","PromiseImplementation","valid","p","then","catch","Error","module","exports"],"mappings":"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","sourcesContent":["/* global module */\r\n'use strict';\r\n\r\n/**\r\n * Class representing the API\r\n */\r\nvar SpotifyWebApi = (function () {\r\n  var _baseUri = 'https://api.spotify.com/v1';\r\n  var _accessToken = null;\r\n  var _promiseImplementation = null;\r\n\r\n  var WrapPromiseWithAbort = function (promise, onAbort) {\r\n    promise.abort = onAbort;\r\n    return promise;\r\n  };\r\n\r\n  var _promiseProvider = function (promiseFunction, onAbort) {\r\n    var returnedPromise;\r\n    if (_promiseImplementation !== null) {\r\n      var deferred = _promiseImplementation.defer();\r\n      promiseFunction(\r\n        function (resolvedResult) {\r\n          deferred.resolve(resolvedResult);\r\n        },\r\n        function (rejectedResult) {\r\n          deferred.reject(rejectedResult);\r\n        }\r\n      );\r\n      returnedPromise = deferred.promise;\r\n    } else {\r\n      if (window.Promise) {\r\n        returnedPromise = new window.Promise(promiseFunction);\r\n      }\r\n    }\r\n\r\n    if (returnedPromise) {\r\n      return new WrapPromiseWithAbort(returnedPromise, onAbort);\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  var _extend = function () {\r\n    var args = Array.prototype.slice.call(arguments);\r\n    var target = args[0];\r\n    var objects = args.slice(1);\r\n    target = target || {};\r\n    objects.forEach(function (object) {\r\n      for (var j in object) {\r\n        if (object.hasOwnProperty(j)) {\r\n          target[j] = object[j];\r\n        }\r\n      }\r\n    });\r\n    return target;\r\n  };\r\n\r\n  var _buildUrl = function (url, parameters) {\r\n    var qs = '';\r\n    for (var key in parameters) {\r\n      if (parameters.hasOwnProperty(key)) {\r\n        var value = parameters[key];\r\n        qs += encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';\r\n      }\r\n    }\r\n    if (qs.length > 0) {\r\n      // chop off last '&'\r\n      qs = qs.substring(0, qs.length - 1);\r\n      url = url + '?' + qs;\r\n    }\r\n    return url;\r\n  };\r\n\r\n  var _performRequest = function (requestData, callback) {\r\n    var req = new XMLHttpRequest();\r\n\r\n    var promiseFunction = function (resolve, reject) {\r\n      function success(data) {\r\n        if (resolve) {\r\n          resolve(data);\r\n        }\r\n        if (callback) {\r\n          callback(null, data);\r\n        }\r\n      }\r\n\r\n      function failure() {\r\n        if (reject) {\r\n          reject(req);\r\n        }\r\n        if (callback) {\r\n          callback(req, null);\r\n        }\r\n      }\r\n\r\n      var type = requestData.type || 'GET';\r\n      req.open(type, _buildUrl(requestData.url, requestData.params));\r\n      if (_accessToken) {\r\n        req.setRequestHeader('Authorization', 'Bearer ' + _accessToken);\r\n      }\r\n      if (requestData.contentType) {\r\n        req.setRequestHeader('Content-Type', requestData.contentType);\r\n      }\r\n\r\n      req.onreadystatechange = function () {\r\n        if (req.readyState === 4) {\r\n          var data = null;\r\n          try {\r\n            data = req.responseText ? JSON.parse(req.responseText) : '';\r\n          } catch (e) {\r\n            console.error(e);\r\n          }\r\n\r\n          if (req.status >= 200 && req.status < 300) {\r\n            success(data);\r\n          } else {\r\n            failure();\r\n          }\r\n        }\r\n      };\r\n\r\n      if (type === 'GET') {\r\n        req.send(null);\r\n      } else {\r\n        var postData = null;\r\n        if (requestData.postData) {\r\n          postData =\r\n            requestData.contentType === 'image/jpeg'\r\n              ? requestData.postData\r\n              : JSON.stringify(requestData.postData);\r\n        }\r\n        req.send(postData);\r\n      }\r\n    };\r\n\r\n    if (callback) {\r\n      promiseFunction();\r\n      return null;\r\n    } else {\r\n      return _promiseProvider(promiseFunction, function () {\r\n        req.abort();\r\n      });\r\n    }\r\n  };\r\n\r\n  var _checkParamsAndPerformRequest = function (\r\n    requestData,\r\n    options,\r\n    callback,\r\n    optionsAlwaysExtendParams\r\n  ) {\r\n    var opt = {};\r\n    var cb = null;\r\n\r\n    if (typeof options === 'object') {\r\n      opt = options;\r\n      cb = callback;\r\n    } else if (typeof options === 'function') {\r\n      cb = options;\r\n    }\r\n\r\n    // options extend postData, if any. Otherwise they extend parameters sent in the url\r\n    var type = requestData.type || 'GET';\r\n    if (type !== 'GET' && requestData.postData && !optionsAlwaysExtendParams) {\r\n      requestData.postData = _extend(requestData.postData, opt);\r\n    } else {\r\n      requestData.params = _extend(requestData.params, opt);\r\n    }\r\n    return _performRequest(requestData, cb);\r\n  };\r\n\r\n  /**\r\n   * Creates an instance of the wrapper\r\n   * @constructor\r\n   */\r\n  var Constr = function () {};\r\n\r\n  Constr.prototype = {\r\n    constructor: SpotifyWebApi\r\n  };\r\n\r\n  /**\r\n   * Fetches a resource through a generic GET request.\r\n   *\r\n   * @param {string} url The URL to be fetched\r\n   * @param {function(Object,Object)} callback An optional callback\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getGeneric = function (url, callback) {\r\n    var requestData = {\r\n      url: url\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches information about the current user.\r\n   * See [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getMe = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches current user's saved tracks.\r\n   * See [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getMySavedTracks = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/tracks'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Adds a list of tracks to the current user's saved tracks.\r\n   * See [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\r\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.addToMySavedTracks = function (trackIds, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/tracks',\r\n      type: 'PUT',\r\n      postData: trackIds\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Remove a list of tracks from the current user's saved tracks.\r\n   * See [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\r\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.removeFromMySavedTracks = function (\r\n    trackIds,\r\n    options,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/tracks',\r\n      type: 'DELETE',\r\n      postData: trackIds\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Checks if the current user's saved tracks contains a certain list of tracks.\r\n   * See [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\r\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.containsMySavedTracks = function (\r\n    trackIds,\r\n    options,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/tracks/contains',\r\n      params: { ids: trackIds.join(',') }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Get a list of the albums saved in the current Spotify user's \"Your Music\" library.\r\n   * See [Get Current User's Saved Albums](https://developer.spotify.com/web-api/get-users-saved-albums/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getMySavedAlbums = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/albums'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Save one or more albums to the current user's \"Your Music\" library.\r\n   * See [Save Albums for Current User](https://developer.spotify.com/web-api/save-albums-user/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\r\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.addToMySavedAlbums = function (albumIds, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/albums',\r\n      type: 'PUT',\r\n      postData: albumIds\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Remove one or more albums from the current user's \"Your Music\" library.\r\n   * See [Remove Albums for Current User](https://developer.spotify.com/web-api/remove-albums-user/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\r\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.removeFromMySavedAlbums = function (\r\n    albumIds,\r\n    options,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/albums',\r\n      type: 'DELETE',\r\n      postData: albumIds\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Check if one or more albums is already saved in the current Spotify user's \"Your Music\" library.\r\n   * See [Check User's Saved Albums](https://developer.spotify.com/web-api/check-users-saved-albums/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\r\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.containsMySavedAlbums = function (\r\n    albumIds,\r\n    options,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/albums/contains',\r\n      params: { ids: albumIds.join(',') }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Get the current user’s top artists based on calculated affinity.\r\n   * See [Get a User’s Top Artists](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getMyTopArtists = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/top/artists'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Get the current user’s top tracks based on calculated affinity.\r\n   * See [Get a User’s Top Tracks](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getMyTopTracks = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/top/tracks'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Get tracks from the current user’s recently played tracks.\r\n   * See [Get Current User’s Recently Played Tracks](https://developer.spotify.com/web-api/web-api-personalization-endpoints/get-recently-played/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getMyRecentlyPlayedTracks = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/player/recently-played'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Adds the current user as a follower of one or more other Spotify users.\r\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\r\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.followUsers = function (userIds, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/following/',\r\n      type: 'PUT',\r\n      params: {\r\n        ids: userIds.join(','),\r\n        type: 'user'\r\n      }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, callback);\r\n  };\r\n\r\n  /**\r\n   * Adds the current user as a follower of one or more artists.\r\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\r\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.followArtists = function (artistIds, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/following/',\r\n      type: 'PUT',\r\n      params: {\r\n        ids: artistIds.join(','),\r\n        type: 'artist'\r\n      }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, callback);\r\n  };\r\n\r\n  /**\r\n   * Add the current user as a follower of one playlist.\r\n   * See [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed. For instance,\r\n   * whether you want the playlist to be followed privately ({public: false})\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.followPlaylist = function (playlistId, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\r\n      type: 'PUT',\r\n      postData: {}\r\n    };\r\n\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Removes the current user as a follower of one or more other Spotify users.\r\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\r\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.unfollowUsers = function (userIds, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/following/',\r\n      type: 'DELETE',\r\n      params: {\r\n        ids: userIds.join(','),\r\n        type: 'user'\r\n      }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, callback);\r\n  };\r\n\r\n  /**\r\n   * Removes the current user as a follower of one or more artists.\r\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\r\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.unfollowArtists = function (artistIds, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/following/',\r\n      type: 'DELETE',\r\n      params: {\r\n        ids: artistIds.join(','),\r\n        type: 'artist'\r\n      }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, callback);\r\n  };\r\n\r\n  /**\r\n   * Remove the current user as a follower of one playlist.\r\n   * See [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.unfollowPlaylist = function (playlistId, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\r\n      type: 'DELETE'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, callback);\r\n  };\r\n\r\n  /**\r\n   * Checks to see if the current user is following one or more other Spotify users.\r\n   * See [Check if Current User Follows Users or Artists](https://developer.spotify.com/web-api/check-current-user-follows/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\r\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\r\n   * whether the user is following the users sent in the request.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.isFollowingUsers = function (userIds, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/following/contains',\r\n      type: 'GET',\r\n      params: {\r\n        ids: userIds.join(','),\r\n        type: 'user'\r\n      }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, callback);\r\n  };\r\n\r\n  /**\r\n   * Checks to see if the current user is following one or more artists.\r\n   * See [Check if Current User Follows](https://developer.spotify.com/web-api/check-current-user-follows/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\r\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\r\n   * whether the user is following the artists sent in the request.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.isFollowingArtists = function (artistIds, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/following/contains',\r\n      type: 'GET',\r\n      params: {\r\n        ids: artistIds.join(','),\r\n        type: 'artist'\r\n      }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, callback);\r\n  };\r\n\r\n  /**\r\n   * Check to see if one or more Spotify users are following a specified playlist.\r\n   * See [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\r\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\r\n   * whether the users are following the playlist sent in the request.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.areFollowingPlaylist = function (\r\n    playlistId,\r\n    userIds,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId + '/followers/contains',\r\n      type: 'GET',\r\n      params: {\r\n        ids: userIds.join(',')\r\n      }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, callback);\r\n  };\r\n\r\n  /**\r\n   * Get the current user's followed artists.\r\n   * See [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} [options] Options, being after and limit.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is an object with a paged object containing\r\n   * artists.\r\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\r\n   * artists objects. Not returned if a callback is given.\r\n   */\r\n  Constr.prototype.getFollowedArtists = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/following',\r\n      type: 'GET',\r\n      params: {\r\n        type: 'artist'\r\n      }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches information about a specific user.\r\n   * See [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\r\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getUser = function (userId, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/users/' + encodeURIComponent(userId)\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches a list of the current user's playlists.\r\n   * See [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\r\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\r\n   * the permissions will be used.\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getUserPlaylists = function (userId, options, callback) {\r\n    var requestData;\r\n    if (typeof userId === 'string') {\r\n      requestData = {\r\n        url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists'\r\n      };\r\n    } else {\r\n      requestData = {\r\n        url: _baseUri + '/me/playlists'\r\n      };\r\n      callback = options;\r\n      options = userId;\r\n    }\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches a specific playlist.\r\n   * See [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getPlaylist = function (playlistId, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches the tracks from a specific playlist.\r\n   * See [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getPlaylistTracks = function (\r\n    playlistId,\r\n    options,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId + '/tracks'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Gets the current image associated with a specific playlist.\r\n   * See [Get a Playlist Cover Image](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist-cover/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:playlist:<here_is_the_playlist_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getPlaylistCoverImage = function (playlistId, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId + '/images'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, callback);\r\n  };\r\n\r\n  /**\r\n   * Creates a playlist and stores it in the current user's library.\r\n   * See [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\r\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.createPlaylist = function (userId, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists',\r\n      type: 'POST',\r\n      postData: options\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Change a playlist's name and public/private state\r\n   * See [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Object} data A JSON object with the data to update. E.g. {name: 'A new name', public: true}\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.changePlaylistDetails = function (\r\n    playlistId,\r\n    data,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId,\r\n      type: 'PUT',\r\n      postData: data\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, data, callback);\r\n  };\r\n\r\n  /**\r\n   * Add tracks to a playlist.\r\n   * See [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.addTracksToPlaylist = function (\r\n    playlistId,\r\n    uris,\r\n    options,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\r\n      type: 'POST',\r\n      postData: {\r\n        uris: uris\r\n      }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback, true);\r\n  };\r\n\r\n  /**\r\n   * Replace the tracks of a playlist\r\n   * See [Replace a Playlist's Tracks](https://developer.spotify.com/web-api/replace-playlists-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.replaceTracksInPlaylist = function (\r\n    playlistId,\r\n    uris,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\r\n      type: 'PUT',\r\n      postData: { uris: uris }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\r\n  };\r\n\r\n  /**\r\n   * Reorder tracks in a playlist\r\n   * See [Reorder a Playlist’s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {number} rangeStart The position of the first track to be reordered.\r\n   * @param {number} insertBefore The position where the tracks should be inserted. To reorder the tracks to\r\n   * the end of the playlist, simply set insert_before to the position after the last track.\r\n   * @param {Object} options An object with optional parameters (range_length, snapshot_id)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.reorderTracksInPlaylist = function (\r\n    playlistId,\r\n    rangeStart,\r\n    insertBefore,\r\n    options,\r\n    callback\r\n  ) {\r\n    /* eslint-disable camelcase */\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\r\n      type: 'PUT',\r\n      postData: {\r\n        range_start: rangeStart,\r\n        insert_before: insertBefore\r\n      }\r\n    };\r\n    /* eslint-enable camelcase */\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Remove tracks from a playlist\r\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\r\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\r\n   * string) and `positions` (which is an array of integers).\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.removeTracksFromPlaylist = function (\r\n    playlistId,\r\n    uris,\r\n    callback\r\n  ) {\r\n    var dataToBeSent = uris.map(function (uri) {\r\n      if (typeof uri === 'string') {\r\n        return { uri: uri };\r\n      } else {\r\n        return uri;\r\n      }\r\n    });\r\n\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\r\n      type: 'DELETE',\r\n      postData: { tracks: dataToBeSent }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\r\n  };\r\n\r\n  /**\r\n   * Remove tracks from a playlist, specifying a snapshot id.\r\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\r\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\r\n   * string) and `positions` (which is an array of integers).\r\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.removeTracksFromPlaylistWithSnapshotId = function (\r\n    playlistId,\r\n    uris,\r\n    snapshotId,\r\n    callback\r\n  ) {\r\n    var dataToBeSent = uris.map(function (uri) {\r\n      if (typeof uri === 'string') {\r\n        return { uri: uri };\r\n      } else {\r\n        return uri;\r\n      }\r\n    });\r\n    /* eslint-disable camelcase */\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\r\n      type: 'DELETE',\r\n      postData: {\r\n        tracks: dataToBeSent,\r\n        snapshot_id: snapshotId\r\n      }\r\n    };\r\n    /* eslint-enable camelcase */\r\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\r\n  };\r\n\r\n  /**\r\n   * Remove tracks from a playlist, specifying the positions of the tracks to be removed.\r\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {Array<number>} positions array of integers containing the positions of the tracks to remove\r\n   * from the playlist.\r\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.removeTracksFromPlaylistInPositions = function (\r\n    playlistId,\r\n    positions,\r\n    snapshotId,\r\n    callback\r\n  ) {\r\n    /* eslint-disable camelcase */\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\r\n      type: 'DELETE',\r\n      postData: {\r\n        positions: positions,\r\n        snapshot_id: snapshotId\r\n      }\r\n    };\r\n    /* eslint-enable camelcase */\r\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\r\n  };\r\n\r\n  /**\r\n   * Upload a custom playlist cover image.\r\n   * See [Upload A Custom Playlist Cover Image](https://developer.spotify.com/web-api/upload-a-custom-playlist-cover-image/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\r\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\r\n   * @param {string} imageData Base64 encoded JPEG image data, maximum payload size is 256 KB.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.uploadCustomPlaylistCoverImage = function (\r\n    playlistId,\r\n    imageData,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/playlists/' + playlistId + '/images',\r\n      type: 'PUT',\r\n      postData: imageData.replace(/^data:image\\/jpeg;base64,/, ''),\r\n      contentType: 'image/jpeg'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches an album from the Spotify catalog.\r\n   * See [Get an Album](https://developer.spotify.com/web-api/get-album/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\r\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getAlbum = function (albumId, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/albums/' + albumId\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches the tracks of an album from the Spotify catalog.\r\n   * See [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\r\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getAlbumTracks = function (albumId, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/albums/' + albumId + '/tracks'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches multiple albums from the Spotify catalog.\r\n   * See [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI it is easy\r\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getAlbums = function (albumIds, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/albums/',\r\n      params: { ids: albumIds.join(',') }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches a track from the Spotify catalog.\r\n   * See [Get a Track](https://developer.spotify.com/web-api/get-track/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\r\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getTrack = function (trackId, options, callback) {\r\n    var requestData = {};\r\n    requestData.url = _baseUri + '/tracks/' + trackId;\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches multiple tracks from the Spotify catalog.\r\n   * See [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\r\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getTracks = function (trackIds, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/tracks/',\r\n      params: { ids: trackIds.join(',') }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches an artist from the Spotify catalog.\r\n   * See [Get an Artist](https://developer.spotify.com/web-api/get-artist/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\r\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getArtist = function (artistId, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/artists/' + artistId\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches multiple artists from the Spotify catalog.\r\n   * See [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\r\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getArtists = function (artistIds, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/artists/',\r\n      params: { ids: artistIds.join(',') }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches the albums of an artist from the Spotify catalog.\r\n   * See [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\r\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getArtistAlbums = function (artistId, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/artists/' + artistId + '/albums'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches a list of top tracks of an artist from the Spotify catalog, for a specific country.\r\n   * See [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\r\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {string} countryId The id of the country (e.g. ES for Spain or US for United States)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getArtistTopTracks = function (\r\n    artistId,\r\n    countryId,\r\n    options,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/artists/' + artistId + '/top-tracks',\r\n      params: { country: countryId }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches a list of artists related with a given one from the Spotify catalog.\r\n   * See [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\r\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getArtistRelatedArtists = function (\r\n    artistId,\r\n    options,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/artists/' + artistId + '/related-artists'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches a list of Spotify featured playlists (shown, for example, on a Spotify player's \"Browse\" tab).\r\n   * See [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getFeaturedPlaylists = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/browse/featured-playlists'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches a list of new album releases featured in Spotify (shown, for example, on a Spotify player's \"Browse\" tab).\r\n   * See [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getNewReleases = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/browse/new-releases'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\r\n   * See [Get a List of Categories](https://developer.spotify.com/web-api/get-list-categories/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getCategories = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/browse/categories'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Get a single category used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\r\n   * See [Get a Category](https://developer.spotify.com/web-api/get-category/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getCategory = function (categoryId, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/browse/categories/' + categoryId\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Get a list of Spotify playlists tagged with a particular category.\r\n   * See [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getCategoryPlaylists = function (\r\n    categoryId,\r\n    options,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/browse/categories/' + categoryId + '/playlists'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Get Spotify catalog information about artists, albums, tracks or playlists that match a keyword string.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Array<string>} types An array of item types to search across.\r\n   * Valid types are: 'album', 'artist', 'playlist', and 'track'.\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.search = function (query, types, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/search/',\r\n      params: {\r\n        q: query,\r\n        type: types.join(',')\r\n      }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches albums from the Spotify catalog according to a query.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.searchAlbums = function (query, options, callback) {\r\n    return this.search(query, ['album'], options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches artists from the Spotify catalog according to a query.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.searchArtists = function (query, options, callback) {\r\n    return this.search(query, ['artist'], options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches tracks from the Spotify catalog according to a query.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.searchTracks = function (query, options, callback) {\r\n    return this.search(query, ['track'], options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches playlists from the Spotify catalog according to a query.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.searchPlaylists = function (query, options, callback) {\r\n    return this.search(query, ['playlist'], options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches shows from the Spotify catalog according to a query.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.searchShows = function (query, options, callback) {\r\n    return this.search(query, ['show'], options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches episodes from the Spotify catalog according to a query.\r\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} query The search query\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.searchEpisodes = function (query, options, callback) {\r\n    return this.search(query, ['episode'], options, callback);\r\n  };\r\n\r\n  /**\r\n   * Get audio features for a single track identified by its unique Spotify ID.\r\n   * See [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\r\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getAudioFeaturesForTrack = function (trackId, callback) {\r\n    var requestData = {};\r\n    requestData.url = _baseUri + '/audio-features/' + trackId;\r\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\r\n  };\r\n\r\n  /**\r\n   * Get audio features for multiple tracks based on their Spotify IDs.\r\n   * See [Get Audio Features for Several Tracks](https://developer.spotify.com/web-api/get-several-audio-features/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\r\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getAudioFeaturesForTracks = function (trackIds, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/audio-features',\r\n      params: { ids: trackIds }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\r\n  };\r\n\r\n  /**\r\n   * Get audio analysis for a single track identified by its unique Spotify ID.\r\n   * See [Get Audio Analysis for a Track](https://developer.spotify.com/web-api/get-audio-analysis/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\r\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getAudioAnalysisForTrack = function (trackId, callback) {\r\n    var requestData = {};\r\n    requestData.url = _baseUri + '/audio-analysis/' + trackId;\r\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\r\n  };\r\n\r\n  /**\r\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\r\n   * See [Get Recommendations Based on Seeds](https://developer.spotify.com/web-api/get-recommendations/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getRecommendations = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/recommendations'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Retrieve a list of available genres seed parameter values for recommendations.\r\n   * See [Available Genre Seeds](https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getAvailableGenreSeeds = function (callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/recommendations/available-genre-seeds'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\r\n  };\r\n\r\n  /**\r\n   * Get information about a user’s available devices.\r\n   * See [Get a User’s Available Devices](https://developer.spotify.com/web-api/get-a-users-available-devices/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getMyDevices = function (callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/player/devices'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\r\n  };\r\n\r\n  /**\r\n   * Get information about the user’s current playback state, including track, track progress, and active device.\r\n   * See [Get Information About The User’s Current Playback](https://developer.spotify.com/web-api/get-information-about-the-users-current-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getMyCurrentPlaybackState = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/player'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Get the object currently being played on the user’s Spotify account.\r\n   * See [Get the User’s Currently Playing Track](https://developer.spotify.com/web-api/get-the-users-currently-playing-track/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getMyCurrentPlayingTrack = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/player/currently-playing'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Transfer playback to a new device and determine if it should start playing.\r\n   * See [Transfer a User’s Playback](https://developer.spotify.com/web-api/transfer-a-users-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} deviceIds A JSON array containing the ID of the device on which playback should be started/transferred.\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.transferMyPlayback = function (\r\n    deviceIds,\r\n    options,\r\n    callback\r\n  ) {\r\n    var postData = options || {};\r\n    postData.device_ids = deviceIds;\r\n    var requestData = {\r\n      type: 'PUT',\r\n      url: _baseUri + '/me/player',\r\n      postData: postData\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Start a new context or resume current playback on the user’s active device.\r\n   * See [Start/Resume a User’s Playback](https://developer.spotify.com/web-api/start-a-users-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.play = function (options, callback) {\r\n    options = options || {};\r\n    var params =\r\n      'device_id' in options ? { device_id: options.device_id } : null;\r\n    var postData = {};\r\n    ['context_uri', 'uris', 'offset', 'position_ms'].forEach(function (field) {\r\n      if (field in options) {\r\n        postData[field] = options[field];\r\n      }\r\n    });\r\n    var requestData = {\r\n      type: 'PUT',\r\n      url: _baseUri + '/me/player/play',\r\n      params: params,\r\n      postData: postData\r\n    };\r\n\r\n    // need to clear options so it doesn't add all of them to the query params\r\n    var newOptions = typeof options === 'function' ? options : {};\r\n    return _checkParamsAndPerformRequest(requestData, newOptions, callback);\r\n  };\r\n\r\n  /**\r\n   * Pause playback on the user’s account.\r\n   * See [Pause a User’s Playback](https://developer.spotify.com/web-api/pause-a-users-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.pause = function (options, callback) {\r\n    options = options || {};\r\n    var params =\r\n      'device_id' in options ? { device_id: options.device_id } : null;\r\n    var requestData = {\r\n      type: 'PUT',\r\n      url: _baseUri + '/me/player/pause',\r\n      params: params\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Skips to next track in the user’s queue.\r\n   * See [Skip User’s Playback To Next Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.skipToNext = function (options, callback) {\r\n    options = options || {};\r\n    var params =\r\n      'device_id' in options ? { device_id: options.device_id } : null;\r\n    var requestData = {\r\n      type: 'POST',\r\n      url: _baseUri + '/me/player/next',\r\n      params: params\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Skips to previous track in the user’s queue.\r\n   * Note that this will ALWAYS skip to the previous track, regardless of the current track’s progress.\r\n   * Returning to the start of the current track should be performed using `.seek()`\r\n   * See [Skip User’s Playback To Previous Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.skipToPrevious = function (options, callback) {\r\n    options = options || {};\r\n    var params =\r\n      'device_id' in options ? { device_id: options.device_id } : null;\r\n    var requestData = {\r\n      type: 'POST',\r\n      url: _baseUri + '/me/player/previous',\r\n      params: params\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Seeks to the given position in the user’s currently playing track.\r\n   * See [Seek To Position In Currently Playing Track](https://developer.spotify.com/web-api/seek-to-position-in-currently-playing-track/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {number} position_ms The position in milliseconds to seek to. Must be a positive number.\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.seek = function (position_ms, options, callback) {\r\n    options = options || {};\r\n    var params = {\r\n      position_ms: position_ms\r\n    };\r\n    if ('device_id' in options) {\r\n      params.device_id = options.device_id;\r\n    }\r\n    var requestData = {\r\n      type: 'PUT',\r\n      url: _baseUri + '/me/player/seek',\r\n      params: params\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Set the repeat mode for the user’s playback. Options are repeat-track, repeat-context, and off.\r\n   * See [Set Repeat Mode On User’s Playback](https://developer.spotify.com/web-api/set-repeat-mode-on-users-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {String} state A string set to 'track', 'context' or 'off'.\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.setRepeat = function (state, options, callback) {\r\n    options = options || {};\r\n    var params = {\r\n      state: state\r\n    };\r\n    if ('device_id' in options) {\r\n      params.device_id = options.device_id;\r\n    }\r\n    var requestData = {\r\n      type: 'PUT',\r\n      url: _baseUri + '/me/player/repeat',\r\n      params: params\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Set the volume for the user’s current playback device.\r\n   * See [Set Volume For User’s Playback](https://developer.spotify.com/web-api/set-volume-for-users-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {number} volume_percent The volume to set. Must be a value from 0 to 100 inclusive.\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.setVolume = function (volume_percent, options, callback) {\r\n    options = options || {};\r\n    var params = {\r\n      volume_percent: volume_percent\r\n    };\r\n    if ('device_id' in options) {\r\n      params.device_id = options.device_id;\r\n    }\r\n    var requestData = {\r\n      type: 'PUT',\r\n      url: _baseUri + '/me/player/volume',\r\n      params: params\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Toggle shuffle on or off for user’s playback.\r\n   * See [Toggle Shuffle For User’s Playback](https://developer.spotify.com/web-api/toggle-shuffle-for-users-playback/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {bool} state Whether or not to shuffle user's playback.\r\n   * @param {Object} options A JSON object with options that can be passed.\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.setShuffle = function (state, options, callback) {\r\n    options = options || {};\r\n    var params = {\r\n      state: state\r\n    };\r\n    if ('device_id' in options) {\r\n      params.device_id = options.device_id;\r\n    }\r\n    var requestData = {\r\n      type: 'PUT',\r\n      url: _baseUri + '/me/player/shuffle',\r\n      params: params\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches a show from the Spotify catalog.\r\n   * See [Get a Show](https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} showId The id of the show. If you know the Spotify URI it is easy\r\n   * to find the show id (e.g. spotify:show:<here_is_the_show_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getShow = function (showId, options, callback) {\r\n    var requestData = {};\r\n    requestData.url = _baseUri + '/shows/' + showId;\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches multiple shows from the Spotify catalog.\r\n   * See [Get Several Shows](https://developer.spotify.com/documentation/web-api/reference/shows/get-several-shows/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\r\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getShows = function (showIds, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/shows/',\r\n      params: { ids: showIds.join(',') }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches current user's saved shows.\r\n   * See [Get Current User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-shows/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getMySavedShows = function (options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/shows'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Adds a list of shows to the current user's saved shows.\r\n   * See [Save Shows for Current User](https://developer.spotify.com/documentation/web-api/reference/library/save-shows-user/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\r\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.addToMySavedShows = function (showIds, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/shows',\r\n      type: 'PUT',\r\n      postData: showIds\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Remove a list of shows from the current user's saved shows.\r\n   * See [Remove Shows for Current User](https://developer.spotify.com/documentation/web-api/reference/library/remove-shows-user/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\r\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.removeFromMySavedShows = function (\r\n    showIds,\r\n    options,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/shows',\r\n      type: 'DELETE',\r\n      postData: showIds\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Checks if the current user's saved shows contains a certain list of shows.\r\n   * See [Check Current User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-shows/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\r\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.containsMySavedShows = function (\r\n    showIds,\r\n    options,\r\n    callback\r\n  ) {\r\n    var requestData = {\r\n      url: _baseUri + '/me/shows/contains',\r\n      params: { ids: showIds.join(',') }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches the episodes of a show from the Spotify catalog.\r\n   * See [Get a Show's Episodes](https://developer.spotify.com/documentation/web-api/reference/shows/get-shows-episodes/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} showId The id of the show. If you know the Spotify URI it is easy\r\n   * to find the show id (e.g. spotify:show:<here_is_the_show_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getShowEpisodes = function (showId, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/shows/' + showId + '/episodes'\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches an episode from the Spotify catalog.\r\n   * See [Get an Episode](https://developer.spotify.com/documentation/web-api/reference/episodes/get-an-episode/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {string} episodeId The id of the episode. If you know the Spotify URI it is easy\r\n   * to find the episode id (e.g. spotify:episode:<here_is_the_episode_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getEpisode = function (episodeId, options, callback) {\r\n    var requestData = {};\r\n    requestData.url = _baseUri + '/episodes/' + episodeId;\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Fetches multiple episodes from the Spotify catalog.\r\n   * See [Get Several Episodes](https://developer.spotify.com/documentation/web-api/reference/episodes/get-several-episodes/) on\r\n   * the Spotify Developer site for more information about the endpoint.\r\n   *\r\n   * @param {Array<string>} episodeIds The ids of the episodes. If you know their Spotify URI it is easy\r\n   * to find their episode id (e.g. spotify:episode:<here_is_the_episode_id>)\r\n   * @param {Object} options A JSON object with options that can be passed\r\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n   */\r\n  Constr.prototype.getEpisodes = function (episodeIds, options, callback) {\r\n    var requestData = {\r\n      url: _baseUri + '/episodes/',\r\n      params: { ids: episodeIds.join(',') }\r\n    };\r\n    return _checkParamsAndPerformRequest(requestData, options, callback);\r\n  };\r\n\r\n  /**\r\n   * Gets the access token in use.\r\n   *\r\n   * @return {string} accessToken The access token\r\n   */\r\n  Constr.prototype.getAccessToken = function () {\r\n    return _accessToken;\r\n  };\r\n\r\n  /**\r\n   * Sets the access token to be used.\r\n   * See [the Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/) on\r\n   * the Spotify Developer site for more information about obtaining an access token.\r\n   *\r\n   * @param {string} accessToken The access token\r\n   * @return {void}\r\n   */\r\n  Constr.prototype.setAccessToken = function (accessToken) {\r\n    _accessToken = accessToken;\r\n  };\r\n\r\n  /**\r\n   * Sets an implementation of Promises/A+ to be used. E.g. Q, when.\r\n   * See [Conformant Implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md)\r\n   * for a list of some available options\r\n   *\r\n   * @param {Object} PromiseImplementation A Promises/A+ valid implementation\r\n   * @throws {Error} If the implementation being set doesn't conform with Promises/A+\r\n   * @return {void}\r\n   */\r\n  Constr.prototype.setPromiseImplementation = function (PromiseImplementation) {\r\n    var valid = false;\r\n    try {\r\n      var p = new PromiseImplementation(function (resolve) {\r\n        resolve();\r\n      });\r\n      if (typeof p.then === 'function' && typeof p.catch === 'function') {\r\n        valid = true;\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    if (valid) {\r\n      _promiseImplementation = PromiseImplementation;\r\n    } else {\r\n      throw new Error('Unsupported implementation of Promises/A+');\r\n    }\r\n  };\r\n\r\n  return Constr;\r\n})();\r\n\r\nif (typeof module === 'object' && typeof module.exports === 'object') {\r\n  module.exports = SpotifyWebApi;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}